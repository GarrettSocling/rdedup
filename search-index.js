var searchIndex = {};
searchIndex["rdedup"] = {"doc":"","items":[],"paths":[]};
searchIndex["rdedup_lib"] = {"doc":"","items":[[3,"Repo","rdedup_lib","",null,null],[3,"SecretKey","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"repo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"repo"}],"output":{"name":"repo"}}],[11,"init","","",0,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_seckey","","",0,{"inputs":[{"name":"repo"},{"name":"str"}],"output":{"name":"result"}}],[11,"open","","",0,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"rm","","Remove a stored name from repo",0,{"inputs":[{"name":"repo"},{"name":"str"}],"output":{"name":"result"}}],[11,"write","","",0,{"inputs":[{"name":"repo"},{"name":"str"},{"name":"r"}],"output":{"name":"result"}}],[11,"read","","",0,{"inputs":[{"name":"repo"},{"name":"str"},{"name":"w"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"du","","",0,{"inputs":[{"name":"repo"},{"name":"str"},{"name":"secretkey"}],"output":{"name":"result"}}],[11,"list_names","","List all names",0,{"inputs":[{"name":"repo"}],"output":{"name":"result"}}],[11,"gc","","",0,{"inputs":[{"name":"repo"}],"output":{"name":"result"}}]],"paths":[[3,"Repo"]]};
searchIndex["crypto"] = {"doc":"","items":[[0,"aead","crypto","",null,null],[8,"AeadEncryptor","crypto::aead","",null,null],[10,"encrypt","","",0,null],[8,"AeadDecryptor","","",null,null],[10,"decrypt","","",1,null],[0,"aes","crypto","",null,null],[4,"KeySize","crypto::aes","AES key size",null,null],[13,"KeySize128","","",2,null],[13,"KeySize192","","",2,null],[13,"KeySize256","","",2,null],[5,"ecb_encryptor","","Get the best implementation of an EcbEncryptor",null,null],[5,"ecb_decryptor","","Get the best implementation of an EcbDecryptor",null,null],[5,"cbc_encryptor","","Get the best implementation of a CbcEncryptor",null,null],[5,"cbc_decryptor","","Get the best implementation of a CbcDecryptor",null,null],[5,"ctr","","Get the best implementation of a Ctr",null,null],[11,"clone","","",2,{"inputs":[{"name":"keysize"}],"output":{"name":"keysize"}}],[0,"aes_gcm","crypto","",null,null],[3,"AesGcm","crypto::aes_gcm","",null,null],[11,"new","","",3,null],[11,"encrypt","","",3,null],[11,"decrypt","","",3,null],[0,"aessafe","crypto","The `aessafe` module implements the AES algorithm completely in software without using any table\nlookups or other timing dependant mechanisms. This module actually contains two seperate\nimplementations - an implementation that works on a single block at a time and a second\nimplementation that processes 8 blocks in parallel. Some block encryption modes really only work if\nyou are processing a single blocks (CFB, OFB, and CBC encryption for example) while other modes\nare trivially parallelizable (CTR and CBC decryption). Processing more blocks at once allows for\ngreater efficiency, especially when using wide registers, such as the XMM registers available in\nx86 processors.",null,null],[3,"AesSafe128Encryptor","crypto::aessafe","",null,null],[3,"AesSafe128Decryptor","","",null,null],[3,"AesSafe192Encryptor","","",null,null],[3,"AesSafe192Decryptor","","",null,null],[3,"AesSafe256Encryptor","","",null,null],[3,"AesSafe256Decryptor","","",null,null],[3,"AesSafe128EncryptorX8","","",null,null],[3,"AesSafe128DecryptorX8","","",null,null],[3,"AesSafe192EncryptorX8","","",null,null],[3,"AesSafe192DecryptorX8","","",null,null],[3,"AesSafe256EncryptorX8","","",null,null],[3,"AesSafe256DecryptorX8","","",null,null],[11,"clone","","",4,{"inputs":[{"name":"aessafe128encryptor"}],"output":{"name":"aessafe128encryptor"}}],[11,"clone","","",5,{"inputs":[{"name":"aessafe128decryptor"}],"output":{"name":"aessafe128decryptor"}}],[11,"new","","",4,null],[11,"new","","",5,null],[11,"block_size","","",4,{"inputs":[{"name":"aessafe128encryptor"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",4,null],[11,"block_size","","",5,{"inputs":[{"name":"aessafe128decryptor"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"aessafe192encryptor"}],"output":{"name":"aessafe192encryptor"}}],[11,"clone","","",7,{"inputs":[{"name":"aessafe192decryptor"}],"output":{"name":"aessafe192decryptor"}}],[11,"new","","",6,null],[11,"new","","",7,null],[11,"block_size","","",6,{"inputs":[{"name":"aessafe192encryptor"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",6,null],[11,"block_size","","",7,{"inputs":[{"name":"aessafe192decryptor"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",7,null],[11,"clone","","",8,{"inputs":[{"name":"aessafe256encryptor"}],"output":{"name":"aessafe256encryptor"}}],[11,"clone","","",9,{"inputs":[{"name":"aessafe256decryptor"}],"output":{"name":"aessafe256decryptor"}}],[11,"new","","",8,null],[11,"new","","",9,null],[11,"block_size","","",8,{"inputs":[{"name":"aessafe256encryptor"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",8,null],[11,"block_size","","",9,{"inputs":[{"name":"aessafe256decryptor"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"aessafe128encryptorx8"}],"output":{"name":"aessafe128encryptorx8"}}],[11,"clone","","",11,{"inputs":[{"name":"aessafe128decryptorx8"}],"output":{"name":"aessafe128decryptorx8"}}],[11,"new","","",10,null],[11,"new","","",11,null],[11,"block_size","","",10,{"inputs":[{"name":"aessafe128encryptorx8"}],"output":{"name":"usize"}}],[11,"encrypt_block_x8","","",10,null],[11,"block_size","","",11,{"inputs":[{"name":"aessafe128decryptorx8"}],"output":{"name":"usize"}}],[11,"decrypt_block_x8","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"aessafe192encryptorx8"}],"output":{"name":"aessafe192encryptorx8"}}],[11,"clone","","",13,{"inputs":[{"name":"aessafe192decryptorx8"}],"output":{"name":"aessafe192decryptorx8"}}],[11,"new","","",12,null],[11,"new","","",13,null],[11,"block_size","","",12,{"inputs":[{"name":"aessafe192encryptorx8"}],"output":{"name":"usize"}}],[11,"encrypt_block_x8","","",12,null],[11,"block_size","","",13,{"inputs":[{"name":"aessafe192decryptorx8"}],"output":{"name":"usize"}}],[11,"decrypt_block_x8","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"aessafe256encryptorx8"}],"output":{"name":"aessafe256encryptorx8"}}],[11,"clone","","",15,{"inputs":[{"name":"aessafe256decryptorx8"}],"output":{"name":"aessafe256decryptorx8"}}],[11,"new","","",14,null],[11,"new","","",15,null],[11,"block_size","","",14,{"inputs":[{"name":"aessafe256encryptorx8"}],"output":{"name":"usize"}}],[11,"encrypt_block_x8","","",14,null],[11,"block_size","","",15,{"inputs":[{"name":"aessafe256decryptorx8"}],"output":{"name":"usize"}}],[11,"decrypt_block_x8","","",15,null],[0,"bcrypt","crypto","",null,null],[5,"bcrypt","crypto::bcrypt","",null,null],[0,"bcrypt_pbkdf","crypto","",null,null],[5,"bcrypt_pbkdf","crypto::bcrypt_pbkdf","",null,null],[0,"blake2b","crypto","",null,null],[3,"Blake2b","crypto::blake2b","",null,null],[11,"clone","","",16,{"inputs":[{"name":"blake2b"}],"output":{"name":"blake2b"}}],[11,"new","","",16,{"inputs":[{"name":"usize"}],"output":{"name":"blake2b"}}],[11,"new_keyed","","",16,null],[11,"reset","","",16,{"inputs":[{"name":"blake2b"}],"output":null}],[11,"blake2b","","",16,null],[11,"reset","","",16,{"inputs":[{"name":"blake2b"}],"output":null}],[11,"input","","",16,null],[11,"result","","",16,null],[11,"output_bits","","",16,{"inputs":[{"name":"blake2b"}],"output":{"name":"usize"}}],[11,"block_size","","",16,{"inputs":[{"name":"blake2b"}],"output":{"name":"usize"}}],[11,"input","","Process input data.",16,null],[11,"reset","","Reset the Mac state to begin processing another input stream.",16,{"inputs":[{"name":"blake2b"}],"output":null}],[11,"result","","Obtain the result of a Mac computation as a MacResult.",16,{"inputs":[{"name":"blake2b"}],"output":{"name":"macresult"}}],[11,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully\nsince incorrect use of the Mac code could result in permitting a timing attack which defeats\nthe security provided by a Mac function.",16,null],[11,"output_bytes","","Get the size of the Mac code, in bytes.",16,{"inputs":[{"name":"blake2b"}],"output":{"name":"usize"}}],[0,"blockmodes","crypto","",null,null],[3,"NoPadding","crypto::blockmodes","No padding mode for ECB and CBC encryption",null,null],[3,"PkcsPadding","","PKCS padding mode for ECB and CBC encryption",null,null],[3,"EncPadding","","Wraps a PaddingProcessor so that only pad_input() will actually be called.",null,null],[3,"DecPadding","","Wraps a PaddingProcessor so that only strip_output() will actually be called.",null,null],[3,"EcbEncryptor","","ECB Encryption mode",null,null],[3,"EcbDecryptor","","ECB Decryption mode",null,null],[3,"CbcEncryptor","","CBC encryption mode",null,null],[3,"CbcDecryptor","","CBC decryption mode",null,null],[3,"CtrMode","","CTR Mode",null,null],[3,"CtrModeX8","","CTR Mode that operates on 8 blocks at a time",null,null],[8,"PaddingProcessor","","A PaddingProcessor handles adding or removing padding",null,null],[10,"pad_input","","Add padding to the last block of input data\nIf the mode can&#39;t handle a non-full block, it signals that error by simply leaving the block\nas it is which will be detected as an InvalidLength error.",17,{"inputs":[{"name":"paddingprocessor"},{"name":"w"}],"output":null}],[10,"strip_output","","Remove padding from the last block of output data\nIf false is returned, the processing fails",17,{"inputs":[{"name":"paddingprocessor"},{"name":"r"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"nopadding"}],"output":{"name":"nopadding"}}],[11,"pad_input","","",18,{"inputs":[{"name":"nopadding"},{"name":"w"}],"output":null}],[11,"strip_output","","",18,{"inputs":[{"name":"nopadding"},{"name":"r"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"pkcspadding"}],"output":{"name":"pkcspadding"}}],[11,"pad_input","","",19,{"inputs":[{"name":"pkcspadding"},{"name":"w"}],"output":null}],[11,"strip_output","","",19,{"inputs":[{"name":"pkcspadding"},{"name":"r"}],"output":{"name":"bool"}}],[11,"pad_input","","",20,{"inputs":[{"name":"encpadding"},{"name":"w"}],"output":null}],[11,"strip_output","","",20,{"inputs":[{"name":"encpadding"},{"name":"r"}],"output":{"name":"bool"}}],[11,"pad_input","","",21,{"inputs":[{"name":"decpadding"},{"name":"w"}],"output":null}],[11,"strip_output","","",21,{"inputs":[{"name":"decpadding"},{"name":"r"}],"output":{"name":"bool"}}],[11,"new","","Create a new ECB encryption mode object",22,{"inputs":[{"name":"t"},{"name":"x"}],"output":{"name":"ecbencryptor"}}],[11,"reset","","",22,{"inputs":[{"name":"ecbencryptor"}],"output":null}],[11,"encrypt","","",22,{"inputs":[{"name":"ecbencryptor"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new","","Create a new ECB decryption mode object",23,{"inputs":[{"name":"t"},{"name":"x"}],"output":{"name":"ecbdecryptor"}}],[11,"reset","","",23,{"inputs":[{"name":"ecbdecryptor"}],"output":null}],[11,"decrypt","","",23,{"inputs":[{"name":"ecbdecryptor"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new","","Create a new CBC encryption mode object",24,{"inputs":[{"name":"t"},{"name":"x"},{"name":"vec"}],"output":{"name":"cbcencryptor"}}],[11,"reset","","",24,null],[11,"encrypt","","",24,{"inputs":[{"name":"cbcencryptor"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new","","Create a new CBC decryption mode object",25,{"inputs":[{"name":"t"},{"name":"x"},{"name":"vec"}],"output":{"name":"cbcdecryptor"}}],[11,"reset","","",25,null],[11,"decrypt","","",25,{"inputs":[{"name":"cbcdecryptor"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new","","Create a new CTR object",26,{"inputs":[{"name":"a"},{"name":"vec"}],"output":{"name":"ctrmode"}}],[11,"reset","","",26,null],[11,"process","","",26,null],[11,"encrypt","","",26,{"inputs":[{"name":"ctrmode"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",26,{"inputs":[{"name":"ctrmode"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new","","Create a new CTR object that operates on 8 blocks at a time",27,null],[11,"reset","","",27,null],[11,"process","","",27,null],[11,"encrypt","","",27,{"inputs":[{"name":"ctrmodex8"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",27,{"inputs":[{"name":"ctrmodex8"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"blowfish","crypto","",null,null],[3,"Blowfish","crypto::blowfish","",null,null],[11,"clone","","",28,{"inputs":[{"name":"blowfish"}],"output":{"name":"blowfish"}}],[11,"new","","",28,null],[11,"init_state","","",28,{"inputs":[],"output":{"name":"blowfish"}}],[11,"expand_key","","",28,null],[11,"salted_expand_key","","",28,null],[11,"encrypt","","",28,null],[11,"block_size","","",28,{"inputs":[{"name":"blowfish"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",28,null],[11,"block_size","","",28,{"inputs":[{"name":"blowfish"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",28,null],[0,"buffer","crypto","",null,null],[3,"RefReadBuffer","crypto::buffer","",null,null],[3,"OwnedReadBuffer","","",null,null],[3,"RefWriteBuffer","","",null,null],[3,"BorrowedWriteBuffer","","",null,null],[3,"OwnedWriteBuffer","","",null,null],[4,"BufferResult","","",null,null],[13,"BufferUnderflow","","",29,null],[13,"BufferOverflow","","",29,null],[8,"ReadBuffer","","",null,null],[10,"is_empty","","",30,{"inputs":[{"name":"readbuffer"}],"output":{"name":"bool"}}],[10,"is_full","","",30,{"inputs":[{"name":"readbuffer"}],"output":{"name":"bool"}}],[10,"remaining","","",30,{"inputs":[{"name":"readbuffer"}],"output":{"name":"usize"}}],[10,"capacity","","",30,{"inputs":[{"name":"readbuffer"}],"output":{"name":"usize"}}],[11,"position","","",30,{"inputs":[{"name":"readbuffer"}],"output":{"name":"usize"}}],[10,"rewind","","",30,{"inputs":[{"name":"readbuffer"},{"name":"usize"}],"output":null}],[10,"truncate","","",30,{"inputs":[{"name":"readbuffer"},{"name":"usize"}],"output":null}],[10,"reset","","",30,{"inputs":[{"name":"readbuffer"}],"output":null}],[10,"peek_next","","",30,null],[11,"peek_remaining","","",30,null],[10,"take_next","","",30,null],[11,"take_remaining","","",30,null],[11,"push_to","","",30,{"inputs":[{"name":"readbuffer"},{"name":"w"}],"output":null}],[8,"WriteBuffer","","",null,null],[10,"is_empty","","",31,{"inputs":[{"name":"writebuffer"}],"output":{"name":"bool"}}],[10,"is_full","","",31,{"inputs":[{"name":"writebuffer"}],"output":{"name":"bool"}}],[10,"remaining","","",31,{"inputs":[{"name":"writebuffer"}],"output":{"name":"usize"}}],[10,"capacity","","",31,{"inputs":[{"name":"writebuffer"}],"output":{"name":"usize"}}],[11,"position","","",31,{"inputs":[{"name":"writebuffer"}],"output":{"name":"usize"}}],[10,"rewind","","",31,{"inputs":[{"name":"writebuffer"},{"name":"usize"}],"output":null}],[10,"reset","","",31,{"inputs":[{"name":"writebuffer"}],"output":null}],[10,"peek_read_buffer","","",31,{"inputs":[{"name":"writebuffer"}],"output":{"name":"refreadbuffer"}}],[10,"take_next","","",31,null],[11,"take_remaining","","",31,null],[10,"take_read_buffer","","",31,{"inputs":[{"name":"writebuffer"}],"output":{"name":"refreadbuffer"}}],[11,"clone","","",29,{"inputs":[{"name":"bufferresult"}],"output":{"name":"bufferresult"}}],[11,"new","","",32,null],[11,"is_empty","","",32,{"inputs":[{"name":"refreadbuffer"}],"output":{"name":"bool"}}],[11,"is_full","","",32,{"inputs":[{"name":"refreadbuffer"}],"output":{"name":"bool"}}],[11,"remaining","","",32,{"inputs":[{"name":"refreadbuffer"}],"output":{"name":"usize"}}],[11,"capacity","","",32,{"inputs":[{"name":"refreadbuffer"}],"output":{"name":"usize"}}],[11,"rewind","","",32,{"inputs":[{"name":"refreadbuffer"},{"name":"usize"}],"output":null}],[11,"truncate","","",32,{"inputs":[{"name":"refreadbuffer"},{"name":"usize"}],"output":null}],[11,"reset","","",32,{"inputs":[{"name":"refreadbuffer"}],"output":null}],[11,"peek_next","","",32,null],[11,"take_next","","",32,null],[11,"new","","",33,{"inputs":[{"name":"vec"}],"output":{"name":"ownedreadbuffer"}}],[11,"new_with_len","","",33,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"ownedreadbuffer"}}],[11,"into_write_buffer","","",33,{"inputs":[{"name":"ownedreadbuffer"}],"output":{"name":"ownedwritebuffer"}}],[11,"borrow_write_buffer","","",33,{"inputs":[{"name":"ownedreadbuffer"}],"output":{"name":"borrowedwritebuffer"}}],[11,"is_empty","","",33,{"inputs":[{"name":"ownedreadbuffer"}],"output":{"name":"bool"}}],[11,"is_full","","",33,{"inputs":[{"name":"ownedreadbuffer"}],"output":{"name":"bool"}}],[11,"remaining","","",33,{"inputs":[{"name":"ownedreadbuffer"}],"output":{"name":"usize"}}],[11,"capacity","","",33,{"inputs":[{"name":"ownedreadbuffer"}],"output":{"name":"usize"}}],[11,"rewind","","",33,{"inputs":[{"name":"ownedreadbuffer"},{"name":"usize"}],"output":null}],[11,"truncate","","",33,{"inputs":[{"name":"ownedreadbuffer"},{"name":"usize"}],"output":null}],[11,"reset","","",33,{"inputs":[{"name":"ownedreadbuffer"}],"output":null}],[11,"peek_next","","",33,null],[11,"take_next","","",33,null],[11,"new","","",34,null],[11,"is_empty","","",34,{"inputs":[{"name":"refwritebuffer"}],"output":{"name":"bool"}}],[11,"is_full","","",34,{"inputs":[{"name":"refwritebuffer"}],"output":{"name":"bool"}}],[11,"remaining","","",34,{"inputs":[{"name":"refwritebuffer"}],"output":{"name":"usize"}}],[11,"capacity","","",34,{"inputs":[{"name":"refwritebuffer"}],"output":{"name":"usize"}}],[11,"rewind","","",34,{"inputs":[{"name":"refwritebuffer"},{"name":"usize"}],"output":null}],[11,"reset","","",34,{"inputs":[{"name":"refwritebuffer"}],"output":null}],[11,"peek_read_buffer","","",34,{"inputs":[{"name":"refwritebuffer"}],"output":{"name":"refreadbuffer"}}],[11,"take_next","","",34,null],[11,"take_read_buffer","","",34,{"inputs":[{"name":"refwritebuffer"}],"output":{"name":"refreadbuffer"}}],[11,"is_empty","","",35,{"inputs":[{"name":"borrowedwritebuffer"}],"output":{"name":"bool"}}],[11,"is_full","","",35,{"inputs":[{"name":"borrowedwritebuffer"}],"output":{"name":"bool"}}],[11,"remaining","","",35,{"inputs":[{"name":"borrowedwritebuffer"}],"output":{"name":"usize"}}],[11,"capacity","","",35,{"inputs":[{"name":"borrowedwritebuffer"}],"output":{"name":"usize"}}],[11,"rewind","","",35,{"inputs":[{"name":"borrowedwritebuffer"},{"name":"usize"}],"output":null}],[11,"reset","","",35,{"inputs":[{"name":"borrowedwritebuffer"}],"output":null}],[11,"peek_read_buffer","","",35,{"inputs":[{"name":"borrowedwritebuffer"}],"output":{"name":"refreadbuffer"}}],[11,"take_next","","",35,null],[11,"take_read_buffer","","",35,{"inputs":[{"name":"borrowedwritebuffer"}],"output":{"name":"refreadbuffer"}}],[11,"new","","",36,{"inputs":[{"name":"vec"}],"output":{"name":"ownedwritebuffer"}}],[11,"into_read_buffer","","",36,{"inputs":[{"name":"ownedwritebuffer"}],"output":{"name":"ownedreadbuffer"}}],[11,"is_empty","","",36,{"inputs":[{"name":"ownedwritebuffer"}],"output":{"name":"bool"}}],[11,"is_full","","",36,{"inputs":[{"name":"ownedwritebuffer"}],"output":{"name":"bool"}}],[11,"remaining","","",36,{"inputs":[{"name":"ownedwritebuffer"}],"output":{"name":"usize"}}],[11,"capacity","","",36,{"inputs":[{"name":"ownedwritebuffer"}],"output":{"name":"usize"}}],[11,"rewind","","",36,{"inputs":[{"name":"ownedwritebuffer"},{"name":"usize"}],"output":null}],[11,"reset","","",36,{"inputs":[{"name":"ownedwritebuffer"}],"output":null}],[11,"peek_read_buffer","","",36,{"inputs":[{"name":"ownedwritebuffer"}],"output":{"name":"refreadbuffer"}}],[11,"take_next","","",36,null],[11,"take_read_buffer","","",36,{"inputs":[{"name":"ownedwritebuffer"}],"output":{"name":"refreadbuffer"}}],[0,"chacha20","crypto","",null,null],[3,"ChaCha20","crypto::chacha20","",null,null],[11,"clone","","",37,{"inputs":[{"name":"chacha20"}],"output":{"name":"chacha20"}}],[11,"new","","",37,null],[11,"new_xchacha20","","",37,null],[11,"process","","",37,null],[11,"encrypt","","",37,{"inputs":[{"name":"chacha20"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",37,{"inputs":[{"name":"chacha20"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"chacha20poly1305","crypto","",null,null],[3,"ChaCha20Poly1305","crypto::chacha20poly1305","",null,null],[11,"clone","","",38,{"inputs":[{"name":"chacha20poly1305"}],"output":{"name":"chacha20poly1305"}}],[11,"new","","",38,null],[11,"encrypt","","",38,null],[11,"decrypt","","",38,null],[0,"curve25519","crypto","",null,null],[3,"Fe","crypto::curve25519","",null,null],[12,"0","","",39,null],[3,"GeP2","","",null,null],[3,"GeP3","","",null,null],[3,"GeP1P1","","",null,null],[3,"GePrecomp","","",null,null],[3,"GeCached","","",null,null],[5,"ge_scalarmult_base","","",null,null],[5,"sc_reduce","","",null,null],[5,"sc_muladd","","",null,null],[5,"curve25519","","",null,null],[5,"curve25519_base","","",null,null],[11,"clone","","",39,{"inputs":[{"name":"fe"}],"output":{"name":"fe"}}],[11,"eq","","",39,{"inputs":[{"name":"fe"},{"name":"fe"}],"output":{"name":"bool"}}],[11,"add","","",39,{"inputs":[{"name":"fe"},{"name":"fe"}],"output":{"name":"fe"}}],[11,"sub","","",39,{"inputs":[{"name":"fe"},{"name":"fe"}],"output":{"name":"fe"}}],[11,"mul","","",39,{"inputs":[{"name":"fe"},{"name":"fe"}],"output":{"name":"fe"}}],[11,"from_bytes","","",39,null],[11,"to_bytes","","",39,null],[11,"maybe_swap_with","","",39,{"inputs":[{"name":"fe"},{"name":"fe"},{"name":"i32"}],"output":null}],[11,"maybe_set","","",39,{"inputs":[{"name":"fe"},{"name":"fe"},{"name":"i32"}],"output":null}],[11,"invert","","",39,{"inputs":[{"name":"fe"}],"output":{"name":"fe"}}],[11,"clone","","",40,{"inputs":[{"name":"gep2"}],"output":{"name":"gep2"}}],[11,"clone","","",41,{"inputs":[{"name":"gep3"}],"output":{"name":"gep3"}}],[11,"clone","","",42,{"inputs":[{"name":"gep1p1"}],"output":{"name":"gep1p1"}}],[11,"clone","","",43,{"inputs":[{"name":"geprecomp"}],"output":{"name":"geprecomp"}}],[11,"clone","","",44,{"inputs":[{"name":"gecached"}],"output":{"name":"gecached"}}],[11,"to_bytes","","",40,null],[11,"double_scalarmult_vartime","","",40,null],[11,"from_bytes_negate_vartime","","",41,null],[11,"to_bytes","","",41,null],[11,"add","","",41,{"inputs":[{"name":"gep3"},{"name":"gecached"}],"output":{"name":"gep1p1"}}],[11,"add","","",41,{"inputs":[{"name":"gep3"},{"name":"geprecomp"}],"output":{"name":"gep1p1"}}],[11,"sub","","",41,{"inputs":[{"name":"gep3"},{"name":"gecached"}],"output":{"name":"gep1p1"}}],[11,"sub","","",41,{"inputs":[{"name":"gep3"},{"name":"geprecomp"}],"output":{"name":"gep1p1"}}],[11,"maybe_set","","",43,{"inputs":[{"name":"geprecomp"},{"name":"geprecomp"},{"name":"i32"}],"output":null}],[11,"select","","",43,{"inputs":[{"name":"usize"},{"name":"i8"}],"output":{"name":"geprecomp"}}],[0,"digest","crypto","",null,null],[8,"Digest","crypto::digest","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions.",null,null],[10,"input","","Provide message data.",45,null],[10,"result","","Retrieve the digest result. This method may be called multiple times.",45,null],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",45,{"inputs":[{"name":"digest"}],"output":null}],[10,"output_bits","","Get the output size in bits.",45,{"inputs":[{"name":"digest"}],"output":{"name":"usize"}}],[11,"output_bytes","","Get the output size in bytes.",45,{"inputs":[{"name":"digest"}],"output":{"name":"usize"}}],[10,"block_size","","Get the block size in bytes.",45,{"inputs":[{"name":"digest"}],"output":{"name":"usize"}}],[11,"input_str","","Convenience function that feeds a string into a digest.",45,{"inputs":[{"name":"digest"},{"name":"str"}],"output":null}],[11,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",45,{"inputs":[{"name":"digest"}],"output":{"name":"string"}}],[0,"ed25519","crypto","",null,null],[5,"keypair","crypto::ed25519","",null,null],[5,"signature","","",null,null],[5,"verify","","",null,null],[5,"exchange","","",null,null],[0,"fortuna","crypto","An implementation of the Fortuna CSPRNG",null,null],[3,"Fortuna","crypto::fortuna","The `Fortuna` CSPRNG (PC 9.5)",null,null],[17,"MIN_POOL_SIZE","","Length in bytes that the first pool must be before a &quot;catastrophic\nreseed&quot; is allowed to happen. (A direct reseed through the\n`SeedableRng` API is not affected by this limit.)",null,null],[11,"new_unseeded","","Creates a new unseeded `Fortuna` (PC 9.5.4)",46,{"inputs":[],"output":{"name":"fortuna"}}],[11,"add_random_event","","Adds a random event `e` from source `s` to entropy pool `i` (PC 9.5.6)",46,null],[11,"fill_bytes","","Generate a bunch of random data into `dest` (PC 9.5.5)",46,null],[11,"next_u32","","",46,{"inputs":[{"name":"fortuna"}],"output":{"name":"u32"}}],[11,"from_seed","","",46,null],[11,"reseed","","",46,null],[0,"ghash","crypto","",null,null],[3,"Ghash","crypto::ghash","A structure representing the state of a GHASH computation",null,null],[3,"GhashWithC","","A structure representing the state of a GHASH computation, after input for C was provided",null,null],[11,"clone","","",47,{"inputs":[{"name":"ghash"}],"output":{"name":"ghash"}}],[11,"clone","","",48,{"inputs":[{"name":"ghashwithc"}],"output":{"name":"ghashwithc"}}],[11,"new","","Creates a new GHASH state, with `h` as the key",47,null],[11,"input_a","","Feeds data for GHASH&#39;s A input",47,null],[11,"input_c","","Feeds data for GHASH&#39;s C input",47,null],[11,"result","","Retrieve the digest result",47,null],[11,"input_c","","Feeds data for GHASH&#39;s C input",48,null],[11,"result","","Retrieve the digest result",48,null],[11,"input","","",47,null],[11,"reset","","",47,{"inputs":[{"name":"ghash"}],"output":null}],[11,"result","","",47,{"inputs":[{"name":"ghash"}],"output":{"name":"macresult"}}],[11,"raw_result","","",47,null],[11,"output_bytes","","",47,{"inputs":[{"name":"ghash"}],"output":{"name":"usize"}}],[0,"hc128","crypto","",null,null],[3,"Hc128","crypto::hc128","",null,null],[11,"clone","","",49,{"inputs":[{"name":"hc128"}],"output":{"name":"hc128"}}],[11,"new","","",49,null],[11,"process","","",49,null],[11,"encrypt","","",49,{"inputs":[{"name":"hc128"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",49,{"inputs":[{"name":"hc128"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"hmac","crypto","This module implements the Hmac function - a Message Authentication Code using a Digest.",null,null],[3,"Hmac","crypto::hmac","The Hmac struct represents an Hmac function - a Message Authentication Code using a Digest.",null,null],[11,"new","","Create a new Hmac instance.",50,null],[11,"input","","",50,null],[11,"reset","","",50,{"inputs":[{"name":"hmac"}],"output":null}],[11,"result","","",50,{"inputs":[{"name":"hmac"}],"output":{"name":"macresult"}}],[11,"raw_result","","",50,null],[11,"output_bytes","","",50,{"inputs":[{"name":"hmac"}],"output":{"name":"usize"}}],[0,"hkdf","crypto","This module implements the HMAC-based Extract-and-Expand Key\nDerivation Function as specified by  https://tools.ietf.org/html/rfc5869.",null,null],[5,"hkdf_extract","crypto::hkdf","Execute the HKDF-Extract function.  Applications MUST NOT use this for\npassword hashing.",null,null],[5,"hkdf_expand","","Execute the HKDF-Expand function.  Applications MUST NOT use this for\npassword hashing.",null,null],[0,"mac","crypto","The mac module defines the Message Authentication Code (Mac) trait.",null,null],[3,"MacResult","crypto::mac","A MacResult wraps a Mac code and provides a safe Eq implementation that runs in fixed time.",null,null],[8,"Mac","","The Mac trait defines methods for a Message Authentication function.",null,null],[10,"input","","Process input data.",51,null],[10,"reset","","Reset the Mac state to begin processing another input stream.",51,{"inputs":[{"name":"mac"}],"output":null}],[10,"result","","Obtain the result of a Mac computation as a MacResult.",51,{"inputs":[{"name":"mac"}],"output":{"name":"macresult"}}],[10,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully\nsince incorrect use of the Mac code could result in permitting a timing attack which defeats\nthe security provided by a Mac function.",51,null],[10,"output_bytes","","Get the size of the Mac code, in bytes.",51,{"inputs":[{"name":"mac"}],"output":{"name":"usize"}}],[11,"new","","Create a new MacResult.",52,null],[11,"new_from_owned","","Create a new MacResult taking ownership of the specified code value.",52,{"inputs":[{"name":"vec"}],"output":{"name":"macresult"}}],[11,"code","","Get the code value. Be very careful using this method, since incorrect use of the code value\nmay permit timing attacks which defeat the security provided by the Mac function.",52,null],[11,"eq","","",52,{"inputs":[{"name":"macresult"},{"name":"macresult"}],"output":{"name":"bool"}}],[0,"md5","crypto","",null,null],[3,"Md5","crypto::md5","The MD5 Digest algorithm",null,null],[11,"new","","Construct a new instance of the MD5 Digest.",53,{"inputs":[],"output":{"name":"md5"}}],[11,"input","","",53,null],[11,"reset","","",53,{"inputs":[{"name":"md5"}],"output":null}],[11,"result","","",53,null],[11,"output_bits","","",53,{"inputs":[{"name":"md5"}],"output":{"name":"usize"}}],[11,"block_size","","",53,{"inputs":[{"name":"md5"}],"output":{"name":"usize"}}],[0,"pbkdf2","crypto","This module implements the PBKDF2 Key Derivation Function as specified by\nhttp://tools.ietf.org/html/rfc2898.",null,null],[5,"pbkdf2","crypto::pbkdf2","Execute the PBKDF2 Key Derivation Function. The Scrypt Key Derivation Function generally provides\nbetter security, so, applications that do not have a requirement to use PBKDF2 specifically\nshould consider using that function instead.",null,null],[5,"pbkdf2_simple","","pbkdf2_simple is a helper function that should be sufficient for the majority of cases where\nan application needs to use PBKDF2 to hash a password for storage. The result is a String that\ncontains the parameters used as part of its encoding. The pbkdf2_check function may be used on\na password to check if it is equal to a hashed value.",null,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[5,"pbkdf2_check","","pbkdf2_check compares a password against the result of a previous call to pbkdf2_simple and\nreturns true if the passed in password hashes to the same value.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"poly1305","crypto","",null,null],[3,"Poly1305","crypto::poly1305","",null,null],[11,"clone","","",54,{"inputs":[{"name":"poly1305"}],"output":{"name":"poly1305"}}],[11,"new","","",54,null],[11,"input","","",54,null],[11,"reset","","",54,{"inputs":[{"name":"poly1305"}],"output":null}],[11,"result","","",54,{"inputs":[{"name":"poly1305"}],"output":{"name":"macresult"}}],[11,"raw_result","","",54,null],[11,"output_bytes","","",54,{"inputs":[{"name":"poly1305"}],"output":{"name":"usize"}}],[0,"rc4","crypto","An implementation of the RC4 (also sometimes called ARC4) stream cipher. THIS IMPLEMENTATION IS\nNOT A FIXED TIME IMPLEMENTATION.",null,null],[3,"Rc4","crypto::rc4","",null,null],[11,"clone","","",55,{"inputs":[{"name":"rc4"}],"output":{"name":"rc4"}}],[11,"new","","",55,null],[11,"process","","",55,null],[11,"encrypt","","",55,{"inputs":[{"name":"rc4"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",55,{"inputs":[{"name":"rc4"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"ripemd160","crypto","An implementation of the RIPEMD-160 cryptographic hash.",null,null],[3,"Ripemd160","crypto::ripemd160","Structure representing the state of a Ripemd160 computation",null,null],[11,"clone","","",56,{"inputs":[{"name":"ripemd160"}],"output":{"name":"ripemd160"}}],[11,"new","","",56,{"inputs":[],"output":{"name":"ripemd160"}}],[11,"reset","","Resets the hash to its original state also clearing the buffer.\nTo be used in between hashing separate messages to avoid having\nto recreate and allocate the whole structure.",56,{"inputs":[{"name":"ripemd160"}],"output":null}],[11,"input","","Adds the input `msg` to the hash. This method can be called repeatedly\nfor use with streaming messages.",56,null],[11,"result","","Returns the resulting digest of the entire message.\nNote: `out` must be at least 20 bytes (160 bits)",56,null],[11,"output_bits","","Returns the size of the digest in bits",56,{"inputs":[{"name":"ripemd160"}],"output":{"name":"usize"}}],[11,"block_size","","Returns the block size the hash operates on in bytes",56,{"inputs":[{"name":"ripemd160"}],"output":{"name":"usize"}}],[0,"salsa20","crypto","",null,null],[3,"Salsa20","crypto::salsa20","",null,null],[5,"hsalsa20","","",null,null],[11,"clone","","",57,{"inputs":[{"name":"salsa20"}],"output":{"name":"salsa20"}}],[11,"new","","",57,null],[11,"new_xsalsa20","","",57,null],[11,"process","","",57,null],[11,"encrypt","","",57,{"inputs":[{"name":"salsa20"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",57,{"inputs":[{"name":"salsa20"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"scrypt","crypto","This module implements the Scrypt key derivation function as specified in [1].",null,null],[3,"ScryptParams","crypto::scrypt","The Scrypt parameter values.",null,null],[5,"scrypt","","The scrypt key derivation function.",null,null],[5,"scrypt_simple","","scrypt_simple is a helper function that should be sufficient for the majority of cases where\nan application needs to use Scrypt to hash a password for storage. The result is a String that\ncontains the parameters used as part of its encoding. The scrypt_check function may be used on\na password to check if it is equal to a hashed value.",null,{"inputs":[{"name":"str"},{"name":"scryptparams"}],"output":{"name":"result"}}],[5,"scrypt_check","","scrypt_check compares a password against the result of a previous call to scrypt_simple and\nreturns true if the passed in password hashes to the same value.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"scryptparams"}],"output":{"name":"scryptparams"}}],[11,"new","","Create a new instance of ScryptParams.",58,{"inputs":[{"name":"u8"},{"name":"u32"},{"name":"u32"}],"output":{"name":"scryptparams"}}],[0,"sha1","crypto","An implementation of the SHA-1 cryptographic hash algorithm.",null,null],[3,"Sha1","crypto::sha1","Structure representing the state of a Sha1 computation",null,null],[5,"sha1_first","","Not an intrinsic, but gets the first element of a vector.",null,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32"}}],[5,"sha1_first_add","","Not an intrinsic, but adds a word to the first element of a vector.",null,{"inputs":[{"name":"u32"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha1_schedule_x4","","Performs 4 rounds of the message schedule update.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha1_first_half","","Emulates `llvm.x86.sha1nexte` intrinsic.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha1_digest_round_x4","","Emulates `llvm.x86.sha1rnds4` intrinsic.\nPerforms 4 rounds of the message block digest.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"i8"}],"output":{"name":"u32x4"}}],[5,"sha1_digest_block_u32","","Process a block with the SHA-1 algorithm.",null,null],[5,"sha1_digest_block","","Process a block with the SHA-1 algorithm. (See more...)",null,null],[11,"clone","","",59,{"inputs":[{"name":"sha1"}],"output":{"name":"sha1"}}],[11,"new","","Construct a `sha` object",59,{"inputs":[],"output":{"name":"sha1"}}],[11,"reset","","",59,{"inputs":[{"name":"sha1"}],"output":null}],[11,"input","","",59,null],[11,"result","","",59,null],[11,"output_bits","","",59,{"inputs":[{"name":"sha1"}],"output":{"name":"usize"}}],[11,"block_size","","",59,{"inputs":[{"name":"sha1"}],"output":{"name":"usize"}}],[0,"sha2","crypto","An implementation of the SHA-2 cryptographic hash algorithms.",null,null],[3,"Sha512","crypto::sha2","The SHA-512 hash algorithm with the SHA-512 initial hash value.",null,null],[3,"Sha384","","The SHA-512 hash algorithm with the SHA-384 initial hash value. The result is truncated to 384 bits.",null,null],[3,"Sha512Trunc256","","The SHA-512 hash algorithm with the SHA-512/256 initial hash value. The result is truncated to 256 bits.",null,null],[3,"Sha512Trunc224","","The SHA-512 hash algorithm with the SHA-512/224 initial hash value. The result is truncated to 224 bits.",null,null],[3,"Sha256","","The SHA-256 hash algorithm with the SHA-256 initial hash value.",null,null],[3,"Sha224","","The SHA-256 hash algorithm with the SHA-224 initial hash value. The result is truncated to 224 bits.",null,null],[5,"sha256_schedule_x4","","Performs 4 rounds of the SHA-256 message schedule update.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha256_digest_round_x2","","Emulates `llvm.x86.sha256rnds2` intrinsic.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha256_digest_block_u32","","Process a block with the SHA-256 algorithm.",null,null],[5,"sha256_digest_block","","Process a block with the SHA-256 algorithm. (See more...)",null,null],[5,"sha512_schedule_x2","","Performs 2 rounds of the SHA-512 message schedule update.",null,{"inputs":[{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[5,"sha512_digest_round","","Performs one round of the SHA-512 message block digest.",null,{"inputs":[{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"},{"name":"u64"}],"output":{"name":"u64x2"}}],[5,"sha512_digest_block_u64","","Process a block with the SHA-512 algorithm.",null,null],[5,"sha512_digest_block","","Process a block with the SHA-512 algorithm. (See more...)",null,null],[17,"K64","","Constants necessary for SHA-512 family of digests.",null,null],[17,"K64X2","","Constants necessary for SHA-512 family of digests.",null,null],[17,"K32","","Constants necessary for SHA-256 family of digests.",null,null],[17,"K32X4","","Constants necessary for SHA-256 family of digests.",null,null],[11,"new","","Construct an new instance of a SHA-512 digest.",60,{"inputs":[],"output":{"name":"sha512"}}],[11,"input","","",60,null],[11,"result","","",60,null],[11,"reset","","",60,{"inputs":[{"name":"sha512"}],"output":null}],[11,"output_bits","","",60,{"inputs":[{"name":"sha512"}],"output":{"name":"usize"}}],[11,"block_size","","",60,{"inputs":[{"name":"sha512"}],"output":{"name":"usize"}}],[11,"new","","Construct an new instance of a SHA-384 digest.",61,{"inputs":[],"output":{"name":"sha384"}}],[11,"input","","",61,null],[11,"result","","",61,null],[11,"reset","","",61,{"inputs":[{"name":"sha384"}],"output":null}],[11,"output_bits","","",61,{"inputs":[{"name":"sha384"}],"output":{"name":"usize"}}],[11,"block_size","","",61,{"inputs":[{"name":"sha384"}],"output":{"name":"usize"}}],[11,"new","","Construct an new instance of a SHA-512/256 digest.",62,{"inputs":[],"output":{"name":"sha512trunc256"}}],[11,"input","","",62,null],[11,"result","","",62,null],[11,"reset","","",62,{"inputs":[{"name":"sha512trunc256"}],"output":null}],[11,"output_bits","","",62,{"inputs":[{"name":"sha512trunc256"}],"output":{"name":"usize"}}],[11,"block_size","","",62,{"inputs":[{"name":"sha512trunc256"}],"output":{"name":"usize"}}],[11,"new","","Construct an new instance of a SHA-512/224 digest.",63,{"inputs":[],"output":{"name":"sha512trunc224"}}],[11,"input","","",63,null],[11,"result","","",63,null],[11,"reset","","",63,{"inputs":[{"name":"sha512trunc224"}],"output":null}],[11,"output_bits","","",63,{"inputs":[{"name":"sha512trunc224"}],"output":{"name":"usize"}}],[11,"block_size","","",63,{"inputs":[{"name":"sha512trunc224"}],"output":{"name":"usize"}}],[11,"clone","","",64,{"inputs":[{"name":"sha256"}],"output":{"name":"sha256"}}],[11,"new","","Construct an new instance of a SHA-256 digest.",64,{"inputs":[],"output":{"name":"sha256"}}],[11,"input","","",64,null],[11,"result","","",64,null],[11,"reset","","",64,{"inputs":[{"name":"sha256"}],"output":null}],[11,"output_bits","","",64,{"inputs":[{"name":"sha256"}],"output":{"name":"usize"}}],[11,"block_size","","",64,{"inputs":[{"name":"sha256"}],"output":{"name":"usize"}}],[11,"clone","","",65,{"inputs":[{"name":"sha224"}],"output":{"name":"sha224"}}],[11,"new","","Construct an new instance of a SHA-224 digest.",65,{"inputs":[],"output":{"name":"sha224"}}],[11,"input","","",65,null],[11,"result","","",65,null],[11,"reset","","",65,{"inputs":[{"name":"sha224"}],"output":null}],[11,"output_bits","","",65,{"inputs":[{"name":"sha224"}],"output":{"name":"usize"}}],[11,"block_size","","",65,{"inputs":[{"name":"sha224"}],"output":{"name":"usize"}}],[0,"sha3","crypto","An implementation of the SHA-3 cryptographic hash algorithms.",null,null],[3,"Sha3","crypto::sha3","",null,null],[4,"Sha3Mode","","SHA-3 Modes.",null,null],[13,"Sha3_224","","",66,null],[13,"Sha3_256","","",66,null],[13,"Sha3_384","","",66,null],[13,"Sha3_512","","",66,null],[13,"Shake128","","",66,null],[13,"Shake256","","",66,null],[13,"Keccak224","","",66,null],[13,"Keccak256","","",66,null],[13,"Keccak384","","",66,null],[13,"Keccak512","","",66,null],[11,"clone","","",66,{"inputs":[{"name":"sha3mode"}],"output":{"name":"sha3mode"}}],[11,"fmt","","",66,{"inputs":[{"name":"sha3mode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"digest_length","","Return the expected hash size in bytes specified for `mode`, or 0\nfor modes with variable output as for shake functions.",66,{"inputs":[{"name":"sha3mode"}],"output":{"name":"usize"}}],[11,"is_shake","","Return `true` if `mode` is a SHAKE mode.",66,{"inputs":[{"name":"sha3mode"}],"output":{"name":"bool"}}],[11,"is_keccak","","Return `true` if `mode` is a Keccak mode.",66,{"inputs":[{"name":"sha3mode"}],"output":{"name":"bool"}}],[11,"new","","New SHA-3 instanciated from specified SHA-3 `mode`.",67,{"inputs":[{"name":"sha3mode"}],"output":{"name":"sha3"}}],[11,"sha3_224","","New SHA3-224 instance.",67,{"inputs":[],"output":{"name":"sha3"}}],[11,"sha3_256","","New SHA3-256 instance.",67,{"inputs":[],"output":{"name":"sha3"}}],[11,"sha3_384","","New SHA3-384 instance.",67,{"inputs":[],"output":{"name":"sha3"}}],[11,"sha3_512","","New SHA3-512 instance.",67,{"inputs":[],"output":{"name":"sha3"}}],[11,"shake_128","","New SHAKE-128 instance.",67,{"inputs":[],"output":{"name":"sha3"}}],[11,"shake_256","","New SHAKE-256 instance.",67,{"inputs":[],"output":{"name":"sha3"}}],[11,"keccak224","","New Keccak224 instance.",67,{"inputs":[],"output":{"name":"sha3"}}],[11,"keccak256","","New Keccak256 instance.",67,{"inputs":[],"output":{"name":"sha3"}}],[11,"keccak384","","New Keccak384 instance.",67,{"inputs":[],"output":{"name":"sha3"}}],[11,"keccak512","","New Keccak512 instance.",67,{"inputs":[],"output":{"name":"sha3"}}],[11,"input","","",67,null],[11,"result","","",67,null],[11,"reset","","",67,{"inputs":[{"name":"sha3"}],"output":null}],[11,"output_bits","","",67,{"inputs":[{"name":"sha3"}],"output":{"name":"usize"}}],[11,"block_size","","",67,{"inputs":[{"name":"sha3"}],"output":{"name":"usize"}}],[11,"clone","","",67,{"inputs":[{"name":"sha3"}],"output":{"name":"self"}}],[0,"sosemanuk","crypto","",null,null],[3,"Sosemanuk","crypto::sosemanuk","",null,null],[11,"clone","","",68,{"inputs":[{"name":"sosemanuk"}],"output":{"name":"sosemanuk"}}],[11,"new","","",68,null],[11,"process","","",68,null],[11,"encrypt","","",68,{"inputs":[{"name":"sosemanuk"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",68,{"inputs":[{"name":"sosemanuk"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"symmetriccipher","crypto","",null,null],[4,"SymmetricCipherError","crypto::symmetriccipher","",null,null],[13,"InvalidLength","","",69,null],[13,"InvalidPadding","","",69,null],[8,"BlockEncryptor","","",null,null],[10,"block_size","","",70,{"inputs":[{"name":"blockencryptor"}],"output":{"name":"usize"}}],[10,"encrypt_block","","",70,null],[8,"BlockEncryptorX8","","",null,null],[10,"block_size","","",71,{"inputs":[{"name":"blockencryptorx8"}],"output":{"name":"usize"}}],[10,"encrypt_block_x8","","",71,null],[8,"BlockDecryptor","","",null,null],[10,"block_size","","",72,{"inputs":[{"name":"blockdecryptor"}],"output":{"name":"usize"}}],[10,"decrypt_block","","",72,null],[8,"BlockDecryptorX8","","",null,null],[10,"block_size","","",73,{"inputs":[{"name":"blockdecryptorx8"}],"output":{"name":"usize"}}],[10,"decrypt_block_x8","","",73,null],[8,"Encryptor","","",null,null],[10,"encrypt","","",74,{"inputs":[{"name":"encryptor"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[8,"Decryptor","","",null,null],[10,"decrypt","","",75,{"inputs":[{"name":"decryptor"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[8,"SynchronousStreamCipher","","",null,null],[10,"process","","",76,null],[11,"clone","","",69,{"inputs":[{"name":"symmetricciphererror"}],"output":{"name":"symmetricciphererror"}}],[11,"fmt","","",69,{"inputs":[{"name":"symmetricciphererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"process","alloc::boxed","",77,null],[11,"encrypt","","",77,{"inputs":[{"name":"box"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decrypt","","",77,{"inputs":[{"name":"box"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"name":"result"}}],[0,"util","crypto","",null,null],[5,"supports_aesni","crypto::util","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"secure_memset","","",null,null],[5,"fixed_time_eq","","Compare two vectors using a fixed number of operations. If the two vectors are not of equal\nlength, the function returns false immediately.",null,null],[5,"rust_crypto_util_supports_aesni","","",null,null],[5,"rust_crypto_util_fixed_time_eq_asm","","",null,null],[5,"rust_crypto_util_secure_memset","","",null,null],[0,"whirlpool","crypto","An implementation of the Whirlpool cryptographic hash algorithm.",null,null],[3,"Whirlpool","crypto::whirlpool","",null,null],[11,"new","","",78,{"inputs":[],"output":{"name":"whirlpool"}}],[11,"input","","",78,null],[11,"result","","",78,null],[11,"reset","","",78,{"inputs":[{"name":"whirlpool"}],"output":null}],[11,"output_bits","","",78,{"inputs":[{"name":"whirlpool"}],"output":{"name":"usize"}}],[11,"block_size","","",78,{"inputs":[{"name":"whirlpool"}],"output":{"name":"usize"}}],[0,"aesni","crypto","",null,null],[3,"AesNiEncryptor","crypto::aesni","",null,null],[3,"AesNiDecryptor","","",null,null],[11,"clone","","",79,{"inputs":[{"name":"aesniencryptor"}],"output":{"name":"aesniencryptor"}}],[11,"clone","","",80,{"inputs":[{"name":"aesnidecryptor"}],"output":{"name":"aesnidecryptor"}}],[11,"new","","",79,null],[11,"new","","",80,null],[11,"block_size","","",79,{"inputs":[{"name":"aesniencryptor"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",79,null],[11,"block_size","","",80,{"inputs":[{"name":"aesnidecryptor"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",80,null]],"paths":[[8,"AeadEncryptor"],[8,"AeadDecryptor"],[4,"KeySize"],[3,"AesGcm"],[3,"AesSafe128Encryptor"],[3,"AesSafe128Decryptor"],[3,"AesSafe192Encryptor"],[3,"AesSafe192Decryptor"],[3,"AesSafe256Encryptor"],[3,"AesSafe256Decryptor"],[3,"AesSafe128EncryptorX8"],[3,"AesSafe128DecryptorX8"],[3,"AesSafe192EncryptorX8"],[3,"AesSafe192DecryptorX8"],[3,"AesSafe256EncryptorX8"],[3,"AesSafe256DecryptorX8"],[3,"Blake2b"],[8,"PaddingProcessor"],[3,"NoPadding"],[3,"PkcsPadding"],[3,"EncPadding"],[3,"DecPadding"],[3,"EcbEncryptor"],[3,"EcbDecryptor"],[3,"CbcEncryptor"],[3,"CbcDecryptor"],[3,"CtrMode"],[3,"CtrModeX8"],[3,"Blowfish"],[4,"BufferResult"],[8,"ReadBuffer"],[8,"WriteBuffer"],[3,"RefReadBuffer"],[3,"OwnedReadBuffer"],[3,"RefWriteBuffer"],[3,"BorrowedWriteBuffer"],[3,"OwnedWriteBuffer"],[3,"ChaCha20"],[3,"ChaCha20Poly1305"],[3,"Fe"],[3,"GeP2"],[3,"GeP3"],[3,"GeP1P1"],[3,"GePrecomp"],[3,"GeCached"],[8,"Digest"],[3,"Fortuna"],[3,"Ghash"],[3,"GhashWithC"],[3,"Hc128"],[3,"Hmac"],[8,"Mac"],[3,"MacResult"],[3,"Md5"],[3,"Poly1305"],[3,"Rc4"],[3,"Ripemd160"],[3,"Salsa20"],[3,"ScryptParams"],[3,"Sha1"],[3,"Sha512"],[3,"Sha384"],[3,"Sha512Trunc256"],[3,"Sha512Trunc224"],[3,"Sha256"],[3,"Sha224"],[4,"Sha3Mode"],[3,"Sha3"],[3,"Sosemanuk"],[4,"SymmetricCipherError"],[8,"BlockEncryptor"],[8,"BlockEncryptorX8"],[8,"BlockDecryptor"],[8,"BlockDecryptorX8"],[8,"Encryptor"],[8,"Decryptor"],[8,"SynchronousStreamCipher"],[3,"Box"],[3,"Whirlpool"],[3,"AesNiEncryptor"],[3,"AesNiDecryptor"]]};
searchIndex["sodiumoxide"] = {"doc":"Rust bindings to the [sodium library](https://github.com/jedisct1/libsodium).","items":[[5,"init","sodiumoxide","`init()` initializes the sodium library and chooses faster versions of\nthe primitives if possible. `init()` also makes the random number generation\nfunctions (`gen_key`, `gen_keypair`, `gen_nonce`, `randombytes`, `randombytes_into`)\nthread-safe",null,{"inputs":[],"output":{"name":"bool"}}],[0,"randombytes","","Cryptographic random number generation.",null,null],[5,"randombytes","sodiumoxide::randombytes","`randombytes()` randomly generates size bytes of data.",null,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[5,"randombytes_into","","`randombytes_into()` fills a buffer `buf` with random data.",null,null],[0,"utils","sodiumoxide","Libsodium utility functions",null,null],[5,"memzero","sodiumoxide::utils","`memzero()` tries to effectively zero out the data in `x` even if\noptimizations are being applied to the code.",null,null],[5,"memcmp","","`memcmp()` returns true if `x[0]`, `x[1]`, ..., `x[len-1]` are the\nsame as `y[0]`, `y[1]`, ..., `y[len-1]`. Otherwise it returns `false`.",null,null],[5,"increment_le","","`increment_le()` treats `x` as an unsigned little-endian number and increments it.",null,null],[0,"crypto","sodiumoxide","Cryptographic functions",null,null],[0,"box_","sodiumoxide::crypto","Public-key authenticated encryption",null,null],[0,"curve25519xsalsa20poly1305","sodiumoxide::crypto::box_","`crypto_box_curve25519xsalsa20poly1305` , a particular\ncombination of Curve25519, Salsa20, and Poly1305 specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html).",null,null],[3,"SecretKey","sodiumoxide::crypto::box_::curve25519xsalsa20poly1305","`SecretKey` for asymmetric authenticated encryption",null,null],[12,"0","","",0,null],[3,"PublicKey","","`PublicKey` for asymmetric authenticated encryption",null,null],[12,"0","","",1,null],[3,"Nonce","","`Nonce` for asymmetric authenticated encryption",null,null],[12,"0","","",2,null],[3,"PrecomputedKey","","Applications that send several messages to the same receiver can gain speed by\nsplitting `seal()` into two steps, `precompute()` and `seal_precomputed()`.\nSimilarly, applications that receive several messages from the same sender can gain\nspeed by splitting `open()` into two steps, `precompute()` and `open_precomputed()`.",null,null],[12,"0","","",3,null],[5,"gen_keypair","","`gen_keypair()` randomly generates a secret key and a corresponding public key.",null,null],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"seal","","`seal()` encrypts and authenticates a message `m` using the senders secret key `sk`,\nthe receivers public key `pk` and a nonce `n`. It returns a ciphertext `c`.",null,null],[5,"open","","`open()` verifies and decrypts a ciphertext `c` using the receiver&#39;s secret key `sk`,\nthe senders public key `pk`, and a nonce `n`. It returns a plaintext `Ok(m)`.\nIf the ciphertext fails verification, `open()` returns `Err(())`.",null,null],[5,"precompute","","`precompute()` computes an intermediate key that can be used by `seal_precomputed()`\nand `open_precomputed()`",null,{"inputs":[{"name":"publickey"},{"name":"secretkey"}],"output":{"name":"precomputedkey"}}],[5,"seal_precomputed","","`seal_precomputed()` encrypts and authenticates a message `m` using a precomputed key `k`,\nand a nonce `n`. It returns a ciphertext `c`.",null,null],[5,"open_precomputed","","`open_precomputed()` verifies and decrypts a ciphertext `c` using a precomputed\nkey `k` and a nonce `n`. It returns a plaintext `Ok(m)`.\nIf the ciphertext fails verification, `open_precomputed()` returns `Err(())`.",null,null],[17,"PUBLICKEYBYTES","","Number of bytes in a `PublicKey`.",null,null],[17,"SECRETKEYBYTES","","Number of bytes in a `SecretKey`.",null,null],[17,"NONCEBYTES","","Number of bytes in a `Nonce`.",null,null],[17,"PRECOMPUTEDKEYBYTES","","Number of bytes in a `PrecomputedKey`.",null,null],[17,"MACBYTES","","Number of bytes in the authenticator tag of an encrypted message\ni.e. the number of bytes by which the ciphertext is larger than the\nplaintext.",null,null],[11,"clone","","",0,{"inputs":[{"name":"secretkey"}],"output":{"name":"secretkey"}}],[11,"eq","","",0,{"inputs":[{"name":"secretkey"},{"name":"secretkey"}],"output":{"name":"bool"}}],[11,"encode","","",0,{"inputs":[{"name":"secretkey"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",0,null],[11,"index","","",0,null],[11,"index","","",0,null],[11,"index","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"secretkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",0,null],[11,"drop","","",0,{"inputs":[{"name":"secretkey"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"eq","","",1,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"encode","","",1,{"inputs":[{"name":"publickey"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",1,null],[11,"index","","",1,null],[11,"index","","",1,null],[11,"index","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"publickey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",1,null],[11,"partial_cmp","","",1,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"publickey"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",1,null],[11,"clone","","",2,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"eq","","",2,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"encode","","",2,{"inputs":[{"name":"nonce"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",2,null],[11,"partial_cmp","","",2,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"ordering"}}],[11,"hash","","",2,{"inputs":[{"name":"nonce"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",2,null],[11,"increment_le","","`increment_le()` treats the nonce as an unsigned little-endian number and\nreturns an incremented version of it.",2,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"increment_le_inplace","","`increment_le_inplace()` treats the nonce as an unsigned little-endian number\nand increments it.",2,{"inputs":[{"name":"nonce"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"precomputedkey"}],"output":{"name":"precomputedkey"}}],[11,"eq","","",3,{"inputs":[{"name":"precomputedkey"},{"name":"precomputedkey"}],"output":{"name":"bool"}}],[11,"encode","","",3,{"inputs":[{"name":"precomputedkey"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",3,null],[11,"index","","",3,null],[11,"index","","",3,null],[11,"index","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"precomputedkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",3,null],[11,"drop","","",3,{"inputs":[{"name":"precomputedkey"}],"output":null}],[0,"sealedbox","sodiumoxide::crypto","Sealed Boxes",null,null],[0,"curve25519blake2bxsalsa20poly1305","sodiumoxide::crypto::sealedbox","A particular combination of Curve25519, Blake2B, Salsa20 and Poly1305.",null,null],[5,"seal","sodiumoxide::crypto::sealedbox::curve25519blake2bxsalsa20poly1305","The `seal()` function encrypts a message `m` for a recipient whose public key\nis `pk`. It returns the ciphertext whose length is `SEALBYTES + m.len()`.",null,null],[5,"open","","The `open()` function decrypts the ciphertext `c` using the key pair `(pk, sk)`\nand returns the decrypted message.",null,null],[0,"sign","sodiumoxide::crypto","Public-key signatures",null,null],[0,"ed25519","sodiumoxide::crypto::sign","`ed25519`, a signature scheme specified in\n[Ed25519](http://ed25519.cr.yp.to/). This function is conjectured to meet the\nstandard notion of unforgeability for a public-key signature scheme under\nchosen-message attacks.",null,null],[3,"Seed","sodiumoxide::crypto::sign::ed25519","`Seed` that can be used for keypair generation",null,null],[12,"0","","",4,null],[3,"SecretKey","","`SecretKey` for signatures",null,null],[12,"0","","",5,null],[3,"PublicKey","","`PublicKey` for signatures",null,null],[12,"0","","",6,null],[3,"Signature","","Detached signature",null,null],[12,"0","","",7,null],[5,"gen_keypair","","`gen_keypair()` randomly generates a secret key and a corresponding public\nkey.",null,null],[5,"keypair_from_seed","","`keypair_from_seed()` computes a secret key and a corresponding public key\nfrom a `Seed`.",null,null],[5,"sign","","`sign()` signs a message `m` using the signer&#39;s secret key `sk`.\n`sign()` returns the resulting signed message `sm`.",null,null],[5,"verify","","`verify()` verifies the signature in `sm` using the signer&#39;s public key `pk`.\n`verify()` returns the message `Ok(m)`.\nIf the signature fails verification, `verify()` returns `Err(())`.",null,null],[5,"sign_detached","","`sign_detached()` signs a message `m` using the signer&#39;s secret key `sk`.\n`sign_detached()` returns the resulting signature `sig`.",null,null],[5,"verify_detached","","`verify_detached()` verifies the signature in `sig` against the message `m`\nand the signer&#39;s public key `pk`.\n`verify_detached()` returns true if the signature is valid, false otherwise.",null,null],[17,"SEEDBYTES","","Number of bytes in a `Seed`.",null,null],[17,"SECRETKEYBYTES","","Number of bytes in a `SecretKey`.",null,null],[17,"PUBLICKEYBYTES","","Number of bytes in a `PublicKey`.",null,null],[17,"SIGNATUREBYTES","","Number of bytes in a `Signature`.",null,null],[11,"clone","","",4,{"inputs":[{"name":"seed"}],"output":{"name":"seed"}}],[11,"eq","","",4,{"inputs":[{"name":"seed"},{"name":"seed"}],"output":{"name":"bool"}}],[11,"encode","","",4,{"inputs":[{"name":"seed"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"seed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",4,null],[11,"drop","","",4,{"inputs":[{"name":"seed"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"secretkey"}],"output":{"name":"secretkey"}}],[11,"eq","","",5,{"inputs":[{"name":"secretkey"},{"name":"secretkey"}],"output":{"name":"bool"}}],[11,"encode","","",5,{"inputs":[{"name":"secretkey"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"secretkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",5,null],[11,"drop","","",5,{"inputs":[{"name":"secretkey"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"eq","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"encode","","",6,{"inputs":[{"name":"publickey"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"publickey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",6,null],[11,"partial_cmp","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"ordering"}}],[11,"hash","","",6,{"inputs":[{"name":"publickey"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",6,null],[11,"clone","","",7,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"eq","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"encode","","",7,{"inputs":[{"name":"signature"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"signature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",7,null],[11,"partial_cmp","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"ordering"}}],[11,"hash","","",7,{"inputs":[{"name":"signature"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",7,null],[0,"scalarmult","sodiumoxide::crypto","Scalar multiplication",null,null],[0,"curve25519","sodiumoxide::crypto::scalarmult","`crypto_scalarmult_curve25519` specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Sections 2, 3, and 4.\nThis function is conjectured to be strong. For background see Bernstein,\n&quot;Curve25519: new Diffie-Hellman speed records,&quot; Lecture Notes in Computer\nScience 3958 (2006), 207–228, http://cr.yp.to/papers.html#curve25519.",null,null],[3,"Scalar","sodiumoxide::crypto::scalarmult::curve25519","`Scalar` value (integer in byte representation)",null,null],[12,"0","","",8,null],[3,"GroupElement","","`GroupElement`",null,null],[12,"0","","",9,null],[5,"scalarmult","","`scalarmult()` multiplies a group element `p`\nby an integer `n`. It returns the resulting group element\n`q`.",null,{"inputs":[{"name":"scalar"},{"name":"groupelement"}],"output":{"name":"groupelement"}}],[5,"scalarmult_base","","`scalarmult_base()` computes the scalar product of a standard\ngroup element and an integer `n`. It returns the resulting\ngroup element `q`/",null,{"inputs":[{"name":"scalar"}],"output":{"name":"groupelement"}}],[17,"GROUPELEMENTBYTES","","Number of bytes in a `GroupElement`.",null,null],[17,"SCALARBYTES","","Number of bytes in a `Scalar`.",null,null],[11,"clone","","",8,{"inputs":[{"name":"scalar"}],"output":{"name":"scalar"}}],[11,"eq","","",8,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"bool"}}],[11,"encode","","",8,{"inputs":[{"name":"scalar"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",8,null],[11,"index","","",8,null],[11,"index","","",8,null],[11,"index","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"scalar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",8,null],[11,"drop","","",8,{"inputs":[{"name":"scalar"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"groupelement"}],"output":{"name":"groupelement"}}],[11,"eq","","",9,{"inputs":[{"name":"groupelement"},{"name":"groupelement"}],"output":{"name":"bool"}}],[11,"encode","","",9,{"inputs":[{"name":"groupelement"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",9,null],[11,"index","","",9,null],[11,"index","","",9,null],[11,"index","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"groupelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",9,null],[11,"drop","","",9,{"inputs":[{"name":"groupelement"}],"output":null}],[0,"auth","sodiumoxide::crypto","Secret-key authentication",null,null],[0,"hmacsha512","sodiumoxide::crypto::auth","`HMAC-SHA-512` `HMAC-SHA-512` is conjectured to meet the standard notion of\nunforgeability.",null,null],[3,"Key","sodiumoxide::crypto::auth::hmacsha512","Authentication `Key`",null,null],[12,"0","","",10,null],[3,"Tag","","Authentication `Tag`",null,null],[12,"0","","",11,null],[3,"State","","Authentication `State`",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for authentication",null,{"inputs":[],"output":{"name":"key"}}],[5,"authenticate","","`authenticate()` authenticates a message `m` using a secret key `k`.\nThe function returns an authenticator tag.",null,null],[5,"verify","","`verify()` returns `true` if `tag` is a correct authenticator of message `m`\nunder a secret key `k`. Otherwise it returns false.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"TAGBYTES","","Number of bytes in a `Tag`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",10,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",10,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",10,null],[11,"index","","",10,null],[11,"index","","",10,null],[11,"index","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",10,null],[11,"drop","","",10,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"tag"}],"output":{"name":"tag"}}],[11,"eq","","",11,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"encode","","",11,{"inputs":[{"name":"tag"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",11,null],[11,"index","","",11,null],[11,"index","","",11,null],[11,"index","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",11,null],[11,"partial_cmp","","",11,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"ordering"}}],[11,"hash","","",11,{"inputs":[{"name":"tag"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",11,null],[11,"drop","","",12,{"inputs":[{"name":"state"}],"output":null}],[11,"init","","`init()` initializes an authentication structure using a secret key &#39;k&#39;.",12,null],[11,"update","","`update()` can be called more than once in order to compute the authenticator\nfrom sequential chunks of the message.",12,null],[11,"finalize","","`finalize()` finalizes the authenticator computation and returns a `Tag`.",12,{"inputs":[{"name":"state"}],"output":{"name":"tag"}}],[0,"hmacsha512256","sodiumoxide::crypto::auth","`HMAC-SHA-512-256`, i.e., the first 256 bits of\n`HMAC-SHA-512`.  `HMAC-SHA-512-256` is conjectured to meet the standard notion\nof unforgeability.",null,null],[3,"Key","sodiumoxide::crypto::auth::hmacsha512256","Authentication `Key`",null,null],[12,"0","","",13,null],[3,"Tag","","Authentication `Tag`",null,null],[12,"0","","",14,null],[3,"State","","Authentication `State`",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for authentication",null,{"inputs":[],"output":{"name":"key"}}],[5,"authenticate","","`authenticate()` authenticates a message `m` using a secret key `k`.\nThe function returns an authenticator tag.",null,null],[5,"verify","","`verify()` returns `true` if `tag` is a correct authenticator of message `m`\nunder a secret key `k`. Otherwise it returns false.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"TAGBYTES","","Number of bytes in a `Tag`.",null,null],[11,"clone","","",13,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",13,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",13,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",13,null],[11,"index","","",13,null],[11,"index","","",13,null],[11,"index","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",13,null],[11,"drop","","",13,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"tag"}],"output":{"name":"tag"}}],[11,"eq","","",14,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"encode","","",14,{"inputs":[{"name":"tag"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",14,null],[11,"index","","",14,null],[11,"index","","",14,null],[11,"index","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",14,null],[11,"partial_cmp","","",14,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"ordering"}}],[11,"hash","","",14,{"inputs":[{"name":"tag"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",14,null],[11,"drop","","",15,{"inputs":[{"name":"state"}],"output":null}],[11,"init","","`init()` initializes an authentication structure using a secret key &#39;k&#39;.",15,null],[11,"update","","`update()` can be called more than once in order to compute the authenticator\nfrom sequential chunks of the message.",15,null],[11,"finalize","","`finalize()` finalizes the authenticator computation and returns a `Tag`.",15,{"inputs":[{"name":"state"}],"output":{"name":"tag"}}],[0,"hmacsha256","sodiumoxide::crypto::auth","`HMAC-SHA-256` `HMAC-SHA-256` is conjectured to meet the standard notion of\nunforgeability.",null,null],[3,"Key","sodiumoxide::crypto::auth::hmacsha256","Authentication `Key`",null,null],[12,"0","","",16,null],[3,"Tag","","Authentication `Tag`",null,null],[12,"0","","",17,null],[3,"State","","Authentication `State`",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for authentication",null,{"inputs":[],"output":{"name":"key"}}],[5,"authenticate","","`authenticate()` authenticates a message `m` using a secret key `k`.\nThe function returns an authenticator tag.",null,null],[5,"verify","","`verify()` returns `true` if `tag` is a correct authenticator of message `m`\nunder a secret key `k`. Otherwise it returns false.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"TAGBYTES","","Number of bytes in a `Tag`.",null,null],[11,"clone","","",16,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",16,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",16,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",16,null],[11,"index","","",16,null],[11,"index","","",16,null],[11,"index","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",16,null],[11,"drop","","",16,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",17,{"inputs":[{"name":"tag"}],"output":{"name":"tag"}}],[11,"eq","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"encode","","",17,{"inputs":[{"name":"tag"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",17,null],[11,"index","","",17,null],[11,"index","","",17,null],[11,"index","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",17,null],[11,"partial_cmp","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"ordering"}}],[11,"hash","","",17,{"inputs":[{"name":"tag"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",17,null],[11,"drop","","",18,{"inputs":[{"name":"state"}],"output":null}],[11,"init","","`init()` initializes an authentication structure using a secret key &#39;k&#39;.",18,null],[11,"update","","`update()` can be called more than once in order to compute the authenticator\nfrom sequential chunks of the message.",18,null],[11,"finalize","","`finalize()` finalizes the authenticator computation and returns a `Tag`.",18,{"inputs":[{"name":"state"}],"output":{"name":"tag"}}],[0,"hash","sodiumoxide::crypto","Hashing",null,null],[0,"sha512","sodiumoxide::crypto::hash","`SHA-512`.",null,null],[3,"Digest","sodiumoxide::crypto::hash::sha512","Digest-structure",null,null],[12,"0","","",19,null],[5,"hash","","`hash` hashes a message `m`. It returns a hash `h`.",null,null],[17,"DIGESTBYTES","","Number of bytes in a `Digest`.",null,null],[17,"BLOCKBYTES","","Block size of the hash function.",null,null],[11,"clone","","",19,{"inputs":[{"name":"digest"}],"output":{"name":"digest"}}],[11,"eq","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"encode","","",19,{"inputs":[{"name":"digest"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",19,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",19,null],[11,"index","","",19,null],[11,"index","","",19,null],[11,"index","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"digest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",19,null],[11,"partial_cmp","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"cmp","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"ordering"}}],[11,"hash","","",19,{"inputs":[{"name":"digest"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",19,null],[0,"sha256","sodiumoxide::crypto::hash","`SHA-256`.",null,null],[3,"Digest","sodiumoxide::crypto::hash::sha256","Digest-structure",null,null],[12,"0","","",20,null],[5,"hash","","`hash` hashes a message `m`. It returns a hash `h`.",null,null],[17,"DIGESTBYTES","","Number of bytes in a `Digest`.",null,null],[17,"BLOCKBYTES","","Block size of the hash function.",null,null],[11,"clone","","",20,{"inputs":[{"name":"digest"}],"output":{"name":"digest"}}],[11,"eq","","",20,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"encode","","",20,{"inputs":[{"name":"digest"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",20,null],[11,"index","","",20,null],[11,"index","","",20,null],[11,"index","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"digest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",20,null],[11,"partial_cmp","","",20,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"cmp","","",20,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"ordering"}}],[11,"hash","","",20,{"inputs":[{"name":"digest"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",20,null],[0,"secretbox","sodiumoxide::crypto","Secret-key authenticated encryption",null,null],[0,"xsalsa20poly1305","sodiumoxide::crypto::secretbox","`crypto_secretbox_xsalsa20poly1305`, a particular\ncombination of Salsa20 and Poly1305 specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html).",null,null],[3,"Key","sodiumoxide::crypto::secretbox::xsalsa20poly1305","`Key` for symmetric authenticated encryption",null,null],[12,"0","","",21,null],[3,"Nonce","","`Nonce` for symmetric authenticated encryption",null,null],[12,"0","","",22,null],[5,"gen_key","","`gen_key()` randomly generates a secret key",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"seal","","`seal()` encrypts and authenticates a message `m` using a secret key `k` and a\nnonce `n`.  It returns a ciphertext `c`.",null,null],[5,"open","","`open()` verifies and decrypts a ciphertext `c` using a secret key `k` and a nonce `n`.\nIt returns a plaintext `Ok(m)`.\nIf the ciphertext fails verification, `open()` returns `Err(())`.",null,null],[17,"KEYBYTES","","Number of bytes in `Key`.",null,null],[17,"NONCEBYTES","","Number of bytes in a `Nonce`.",null,null],[17,"MACBYTES","","Number of bytes in the authenticator tag of an encrypted message\ni.e. the number of bytes by which the ciphertext is larger than the\nplaintext.",null,null],[11,"clone","","",21,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",21,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",21,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",21,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",21,null],[11,"index","","",21,null],[11,"index","","",21,null],[11,"index","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",21,null],[11,"drop","","",21,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",22,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"eq","","",22,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"encode","","",22,{"inputs":[{"name":"nonce"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",22,null],[11,"index","","",22,null],[11,"index","","",22,null],[11,"index","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",22,null],[11,"partial_cmp","","",22,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"cmp","","",22,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"ordering"}}],[11,"hash","","",22,{"inputs":[{"name":"nonce"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",22,null],[11,"increment_le","","`increment_le()` treats the nonce as an unsigned little-endian number and\nreturns an incremented version of it.",22,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"increment_le_inplace","","`increment_le_inplace()` treats the nonce as an unsigned little-endian number\nand increments it.",22,{"inputs":[{"name":"nonce"}],"output":null}],[0,"onetimeauth","sodiumoxide::crypto","Secret-key One-time authentication",null,null],[0,"poly1305","sodiumoxide::crypto::onetimeauth","`crypto_onetimeauth_poly1305`, an authenticator specified\nin [Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 9. This\nauthenticator is proven to meet the standard notion of unforgeability after a\nsingle message.",null,null],[3,"Key","sodiumoxide::crypto::onetimeauth::poly1305","Authentication `Key`",null,null],[12,"0","","",23,null],[3,"Tag","","Authentication `Tag`",null,null],[12,"0","","",24,null],[5,"gen_key","","`gen_key()` randomly generates a key for authentication",null,{"inputs":[],"output":{"name":"key"}}],[5,"authenticate","","`authenticate()` authenticates a message `m` using a secret key `k`.\nThe function returns an authenticator tag.",null,null],[5,"verify","","`verify()` returns `true` if `tag` is a correct authenticator of message `m`\nunder a secret key `k`. Otherwise it returns false.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"TAGBYTES","","Number of bytes in a `Tag`.",null,null],[11,"clone","","",23,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",23,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",23,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",23,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",23,null],[11,"index","","",23,null],[11,"index","","",23,null],[11,"index","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",23,null],[11,"drop","","",23,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",24,{"inputs":[{"name":"tag"}],"output":{"name":"tag"}}],[11,"eq","","",24,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"encode","","",24,{"inputs":[{"name":"tag"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",24,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",24,null],[11,"index","","",24,null],[11,"index","","",24,null],[11,"index","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",24,null],[11,"partial_cmp","","",24,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"cmp","","",24,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"ordering"}}],[11,"hash","","",24,{"inputs":[{"name":"tag"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",24,null],[0,"pwhash","sodiumoxide::crypto","Password Hashing",null,null],[0,"scryptsalsa208sha256","sodiumoxide::crypto::pwhash","`crypto_pwhash_scryptsalsa208sha256`, a particular combination of Scrypt, Salsa20/8\nand SHA-256",null,null],[3,"OpsLimit","sodiumoxide::crypto::pwhash::scryptsalsa208sha256","`OpsLimit` represents the maximum number of computations to perform when\nusing the functions in this module.",null,null],[12,"0","","",25,null],[3,"MemLimit","","`MemLimit` represents the maximum amount of RAM that the functions in this\nmodule will use, in bytes.",null,null],[12,"0","","",26,null],[3,"Salt","","`Salt` used for password hashing",null,null],[12,"0","","",27,null],[3,"HashedPassword","","`HashedPassword`is a password verifier generated from a password",null,null],[12,"0","","",28,null],[5,"gen_salt","","`gen_salt()` randombly generates a new `Salt` for key derivation",null,{"inputs":[],"output":{"name":"salt"}}],[5,"derive_key","","The `derive_key()` function derives a key from a password and a `Salt`",null,null],[5,"pwhash","","The `pwhash()` returns a `HashedPassword` which\nincludes:",null,null],[5,"pwhash_verify","","`pwhash_verify()` verifies that the password `str_` is a valid password\nverification string (as generated by `pwhash()`) for `passwd`",null,null],[17,"SALTBYTES","","Number of bytes in a `Salt`.",null,null],[17,"HASHEDPASSWORDBYTES","","Number of bytes in a `HashedPassword`.",null,null],[17,"STRPREFIX","","All `HashedPasswords` start with this string.",null,null],[17,"OPSLIMIT_INTERACTIVE","","Safe base line for `OpsLimit` for interactive password hashing.",null,null],[17,"MEMLIMIT_INTERACTIVE","","Safe base line for `MemLimit` for interactive password hashing.",null,null],[17,"OPSLIMIT_SENSITIVE","","`OpsLimit` for highly sensitive data.",null,null],[17,"MEMLIMIT_SENSITIVE","","`MemLimit` for highly sensitive data.",null,null],[11,"clone","","",25,{"inputs":[{"name":"opslimit"}],"output":{"name":"opslimit"}}],[11,"clone","","",26,{"inputs":[{"name":"memlimit"}],"output":{"name":"memlimit"}}],[11,"clone","","",27,{"inputs":[{"name":"salt"}],"output":{"name":"salt"}}],[11,"eq","","",27,{"inputs":[{"name":"salt"},{"name":"salt"}],"output":{"name":"bool"}}],[11,"encode","","",27,{"inputs":[{"name":"salt"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",27,null],[11,"index","","",27,null],[11,"index","","",27,null],[11,"index","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"salt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",27,null],[11,"partial_cmp","","",27,{"inputs":[{"name":"salt"},{"name":"salt"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"salt"},{"name":"salt"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"salt"},{"name":"salt"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"salt"},{"name":"salt"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"salt"},{"name":"salt"}],"output":{"name":"bool"}}],[11,"cmp","","",27,{"inputs":[{"name":"salt"},{"name":"salt"}],"output":{"name":"ordering"}}],[11,"hash","","",27,{"inputs":[{"name":"salt"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",27,null],[11,"clone","","",28,{"inputs":[{"name":"hashedpassword"}],"output":{"name":"hashedpassword"}}],[11,"eq","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"bool"}}],[11,"encode","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",28,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",28,null],[11,"partial_cmp","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"bool"}}],[11,"cmp","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"ordering"}}],[11,"hash","","",28,{"inputs":[{"name":"hashedpassword"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",28,null],[0,"stream","sodiumoxide::crypto","Secret-key encryption",null,null],[0,"xsalsa20","sodiumoxide::crypto::stream","`crypto_stream_xsalsa20`, a particular cipher specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 7.\nThis cipher is conjectured to meet the standard notion of\nunpredictability.",null,null],[3,"Key","sodiumoxide::crypto::stream::xsalsa20","`Key` for symmetric encryption",null,null],[12,"0","","",29,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[12,"0","","",30,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"NONCEBYTES","","Number of bytes in a `Nonce`.",null,null],[11,"clone","","",29,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",29,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",29,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",29,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",29,null],[11,"index","","",29,null],[11,"index","","",29,null],[11,"index","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",29,null],[11,"drop","","",29,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",30,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"eq","","",30,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"encode","","",30,{"inputs":[{"name":"nonce"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",30,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",30,null],[11,"index","","",30,null],[11,"index","","",30,null],[11,"index","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",30,null],[11,"partial_cmp","","",30,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"cmp","","",30,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"ordering"}}],[11,"hash","","",30,{"inputs":[{"name":"nonce"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",30,null],[11,"increment_le","","`increment_le()` treats the nonce as an unsigned little-endian number and\nreturns an incremented version of it.",30,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"increment_le_inplace","","`increment_le_inplace()` treats the nonce as an unsigned little-endian number\nand increments it.",30,{"inputs":[{"name":"nonce"}],"output":null}],[0,"aes128ctr","sodiumoxide::crypto::stream","`AES 128` in `CTR`-mode\nThis cipher is conjectured to meet the standard notion of\nunpredictability.",null,null],[3,"Key","sodiumoxide::crypto::stream::aes128ctr","`Key` for symmetric encryption",null,null],[12,"0","","",31,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[12,"0","","",32,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"NONCEBYTES","","Number of bytes in a `Nonce`.",null,null],[11,"clone","","",31,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",31,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",31,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",31,null],[11,"index","","",31,null],[11,"index","","",31,null],[11,"index","","",31,null],[11,"fmt","","",31,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",31,null],[11,"drop","","",31,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",32,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"eq","","",32,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"encode","","",32,{"inputs":[{"name":"nonce"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",32,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",32,null],[11,"index","","",32,null],[11,"index","","",32,null],[11,"index","","",32,null],[11,"fmt","","",32,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",32,null],[11,"partial_cmp","","",32,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"option"}}],[11,"lt","","",32,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"le","","",32,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"ge","","",32,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"gt","","",32,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"cmp","","",32,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"ordering"}}],[11,"hash","","",32,{"inputs":[{"name":"nonce"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",32,null],[11,"increment_le","","`increment_le()` treats the nonce as an unsigned little-endian number and\nreturns an incremented version of it.",32,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"increment_le_inplace","","`increment_le_inplace()` treats the nonce as an unsigned little-endian number\nand increments it.",32,{"inputs":[{"name":"nonce"}],"output":null}],[0,"salsa208","sodiumoxide::crypto::stream","`crypto_stream_salsa208` (Salsa20/8), a particular cipher specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 7.  This\ncipher is conjectured to meet the standard notion of unpredictability.",null,null],[3,"Key","sodiumoxide::crypto::stream::salsa208","`Key` for symmetric encryption",null,null],[12,"0","","",33,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[12,"0","","",34,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"NONCEBYTES","","Number of bytes in a `Nonce`.",null,null],[11,"clone","","",33,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",33,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",33,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",33,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",33,null],[11,"index","","",33,null],[11,"index","","",33,null],[11,"index","","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",33,null],[11,"drop","","",33,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",34,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"eq","","",34,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"encode","","",34,{"inputs":[{"name":"nonce"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",34,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",34,null],[11,"index","","",34,null],[11,"index","","",34,null],[11,"index","","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",34,null],[11,"partial_cmp","","",34,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"option"}}],[11,"lt","","",34,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"le","","",34,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"ge","","",34,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"gt","","",34,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"cmp","","",34,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"ordering"}}],[11,"hash","","",34,{"inputs":[{"name":"nonce"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",34,null],[11,"increment_le","","`increment_le()` treats the nonce as an unsigned little-endian number and\nreturns an incremented version of it.",34,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"increment_le_inplace","","`increment_le_inplace()` treats the nonce as an unsigned little-endian number\nand increments it.",34,{"inputs":[{"name":"nonce"}],"output":null}],[0,"salsa2012","sodiumoxide::crypto::stream","`crypto_stream_salsa2012` (Salsa20/12), a particular cipher specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 7.  This\ncipher is conjectured to meet the standard notion of unpredictability.",null,null],[3,"Key","sodiumoxide::crypto::stream::salsa2012","`Key` for symmetric encryption",null,null],[12,"0","","",35,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[12,"0","","",36,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"NONCEBYTES","","Number of bytes in a `Nonce`.",null,null],[11,"clone","","",35,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",35,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",35,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",35,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",35,null],[11,"index","","",35,null],[11,"index","","",35,null],[11,"index","","",35,null],[11,"fmt","","",35,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",35,null],[11,"drop","","",35,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",36,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"eq","","",36,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"encode","","",36,{"inputs":[{"name":"nonce"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",36,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",36,null],[11,"index","","",36,null],[11,"index","","",36,null],[11,"index","","",36,null],[11,"fmt","","",36,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",36,null],[11,"partial_cmp","","",36,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"option"}}],[11,"lt","","",36,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"le","","",36,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"ge","","",36,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"gt","","",36,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"cmp","","",36,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"ordering"}}],[11,"hash","","",36,{"inputs":[{"name":"nonce"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",36,null],[11,"increment_le","","`increment_le()` treats the nonce as an unsigned little-endian number and\nreturns an incremented version of it.",36,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"increment_le_inplace","","`increment_le_inplace()` treats the nonce as an unsigned little-endian number\nand increments it.",36,{"inputs":[{"name":"nonce"}],"output":null}],[0,"salsa20","sodiumoxide::crypto::stream","`crypto_stream_salsa20` (Salsa20/20), a particular cipher specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 7.  This\ncipher is conjectured to meet the standard notion of unpredictability.",null,null],[3,"Key","sodiumoxide::crypto::stream::salsa20","`Key` for symmetric encryption",null,null],[12,"0","","",37,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[12,"0","","",38,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"NONCEBYTES","","Number of bytes in a `Nonce`.",null,null],[11,"clone","","",37,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",37,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",37,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",37,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",37,null],[11,"index","","",37,null],[11,"index","","",37,null],[11,"index","","",37,null],[11,"fmt","","",37,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",37,null],[11,"drop","","",37,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",38,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"eq","","",38,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"encode","","",38,{"inputs":[{"name":"nonce"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",38,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",38,null],[11,"index","","",38,null],[11,"index","","",38,null],[11,"index","","",38,null],[11,"fmt","","",38,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",38,null],[11,"partial_cmp","","",38,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"option"}}],[11,"lt","","",38,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"le","","",38,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"ge","","",38,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"gt","","",38,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"cmp","","",38,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"ordering"}}],[11,"hash","","",38,{"inputs":[{"name":"nonce"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",38,null],[11,"increment_le","","`increment_le()` treats the nonce as an unsigned little-endian number and\nreturns an incremented version of it.",38,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"increment_le_inplace","","`increment_le_inplace()` treats the nonce as an unsigned little-endian number\nand increments it.",38,{"inputs":[{"name":"nonce"}],"output":null}],[0,"chacha20","sodiumoxide::crypto::stream","`crypto_stream_chacha20` (Chacha20)",null,null],[3,"Key","sodiumoxide::crypto::stream::chacha20","`Key` for symmetric encryption",null,null],[12,"0","","",39,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[12,"0","","",40,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[17,"NONCEBYTES","","Number of bytes in a `Nonce`.",null,null],[11,"clone","","",39,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",39,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",39,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",39,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",39,null],[11,"index","","",39,null],[11,"index","","",39,null],[11,"index","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",39,null],[11,"drop","","",39,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",40,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"eq","","",40,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"encode","","",40,{"inputs":[{"name":"nonce"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",40,null],[11,"index","","",40,null],[11,"index","","",40,null],[11,"index","","",40,null],[11,"fmt","","",40,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",40,null],[11,"partial_cmp","","",40,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"option"}}],[11,"lt","","",40,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"le","","",40,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"ge","","",40,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"gt","","",40,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"cmp","","",40,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"ordering"}}],[11,"hash","","",40,{"inputs":[{"name":"nonce"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",40,null],[11,"increment_le","","`increment_le()` treats the nonce as an unsigned little-endian number and\nreturns an incremented version of it.",40,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"increment_le_inplace","","`increment_le_inplace()` treats the nonce as an unsigned little-endian number\nand increments it.",40,{"inputs":[{"name":"nonce"}],"output":null}],[0,"shorthash","sodiumoxide::crypto","A lot of applications and programming language implementations have been\nrecently found to be vulnerable to denial-of-service attacks when a hash\nfunction with weak security guarantees, like Murmurhash 3, was used to\nconstruct a hash table.",null,null],[0,"siphash24","sodiumoxide::crypto::shorthash","`SipHash-2-4`",null,null],[3,"Digest","sodiumoxide::crypto::shorthash::siphash24","`Digest` structure",null,null],[12,"0","","",41,null],[3,"Key","","`Key`",null,null],[12,"0","","",42,null],[5,"gen_key","","`gen_key()` randomly generates a key for shorthash",null,{"inputs":[],"output":{"name":"key"}}],[5,"shorthash","","`shorthash` hashes a message `m` under a key `k`. It\nreturns a hash `h`.",null,null],[17,"DIGESTBYTES","","Number of bytes in a `Digest`.",null,null],[17,"KEYBYTES","","Number of bytes in a `Key`.",null,null],[11,"clone","","",41,{"inputs":[{"name":"digest"}],"output":{"name":"digest"}}],[11,"eq","","",41,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"encode","","",41,{"inputs":[{"name":"digest"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",41,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",41,null],[11,"index","","",41,null],[11,"index","","",41,null],[11,"index","","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"digest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",41,null],[11,"partial_cmp","","",41,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"cmp","","",41,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"ordering"}}],[11,"hash","","",41,{"inputs":[{"name":"digest"},{"name":"h"}],"output":null}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",41,null],[11,"clone","","",42,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",42,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",42,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",42,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"index","","",42,null],[11,"index","","",42,null],[11,"index","","",42,null],[11,"index","","",42,null],[11,"fmt","","",42,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",42,null],[11,"drop","","",42,{"inputs":[{"name":"key"}],"output":null}],[0,"verify","sodiumoxide::crypto","Constant-time comparison of fixed-size vecs",null,null],[5,"verify_16","sodiumoxide::crypto::verify","`verify_16()` returns `true` if `x[0]`, `x[1]`, ..., `x[15]` are the\nsame as `y[0]`, `y[1]`, ..., `y[15]`. Otherwise it returns `false`.",null,null],[5,"verify_32","","`verify_32()` returns true if `x[0]`, `x[1]`, ..., `x[31]` are the\nsame as `y[0]`, `y[1]`, ..., `y[31]`. Otherwise it returns `false`.",null,null],[5,"verify_64","","`verify_64()` returns true if `x[0]`, `x[1]`, ..., `x[63]` are the\nsame as `y[0]`, `y[1]`, ..., `y[63]`. Otherwise it returns `false`.",null,null]],"paths":[[3,"SecretKey"],[3,"PublicKey"],[3,"Nonce"],[3,"PrecomputedKey"],[3,"Seed"],[3,"SecretKey"],[3,"PublicKey"],[3,"Signature"],[3,"Scalar"],[3,"GroupElement"],[3,"Key"],[3,"Tag"],[3,"State"],[3,"Key"],[3,"Tag"],[3,"State"],[3,"Key"],[3,"Tag"],[3,"State"],[3,"Digest"],[3,"Digest"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Tag"],[3,"OpsLimit"],[3,"MemLimit"],[3,"Salt"],[3,"HashedPassword"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Nonce"],[3,"Digest"],[3,"Key"]]};
searchIndex["env_logger"] = {"doc":"A logger configured via an environment variable which writes to standard\nerror.","items":[[3,"LogBuilder","env_logger","LogBuilder acts as builder for initializing the Logger.\nIt can be used to customize the log format, change the enviromental variable used\nto provide the logging directives and also set the default log level filter.",null,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"name":"result"}}],[11,"new","","Initializes the log builder with defaults",0,{"inputs":[],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",0,{"inputs":[{"name":"logbuilder"},{"name":"option"},{"name":"loglevelfilter"}],"output":{"name":"self"}}],[11,"format","","Sets the format function for formatting the log output.",0,{"inputs":[{"name":"logbuilder"},{"name":"f"}],"output":{"name":"self"}}],[11,"parse","","Parses the directives string in the same form as the RUST_LOG\nenvironment variable.",0,{"inputs":[{"name":"logbuilder"},{"name":"str"}],"output":{"name":"self"}}],[11,"init","","Initializes the global logger with an env logger.",0,{"inputs":[{"name":"logbuilder"}],"output":{"name":"result"}}]],"paths":[[3,"LogBuilder"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst-case performance. The specific syntax supported is\ndocumented further down.","items":[[3,"RegexSet","regex","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",1,null],[13,"InvalidSet","","**DEPRECATED:** Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexSet","regex::bytes","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIterBytes","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIntoIterBytes","","An owned iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and\nthe value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte\nstring.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"inputs":[{"name":"replacer"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",4,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",4,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",4,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",4,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",4,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",4,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",4,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",4,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",4,null],[11,"as_slice","","Extracts a slice containing the entire vector.",4,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",4,null],[11,"set_len","","Sets the length of a vector.",4,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",4,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",4,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",4,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",4,null],[11,"push","","Appends an element to the back of a collection.",4,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",4,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",4,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",4,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",4,null],[11,"len","","Returns the number of elements in the vector.",4,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",4,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",4,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",4,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",4,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",4,null],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","","",4,null],[11,"as_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",4,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",4,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"vec"}}],[11,"drop","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"extend","","",4,null],[11,"extend","","",4,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",4,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"deref_mut","","",4,null],[11,"deref","","",4,null],[11,"index_mut","","",4,null],[11,"index_mut","","",4,null],[11,"index_mut","","",4,null],[11,"index_mut","","",4,null],[11,"index_mut","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",4,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",4,null],[11,"borrow_mut","","",4,null],[11,"borrow","","",4,null],[11,"from","","",4,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"fmt","regex","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"no_expansion","regex::re_bytes","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}],[11,"clone","regex::bytes","",5,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",5,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",5,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",5,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",5,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",5,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",5,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",5,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",5,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",5,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",5,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The\nreplacement can be a regular byte string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced byte string.",5,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",5,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",5,null],[11,"shortest_match","","Returns the end location of a match in the text given.",5,null],[11,"as_str","","Returns the original string of this regex.",5,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",5,{"inputs":[{"name":"regex"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",5,{"inputs":[{"name":"regex"}],"output":{"name":"usize"}}],[11,"next","","",6,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"splits"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"splitsn"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"capturenames"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original byte string matched.",11,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",11,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",11,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",11,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",11,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",11,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",11,null],[11,"len","","Returns the number of captured groups.",11,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",11,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"captures"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",11,null],[11,"index","","",11,null],[11,"next","","",12,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"replace_append","","",2,{"inputs":[{"name":"noexpand"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",2,{"inputs":[{"name":"noexpand"}],"output":{"name":"option"}}],[11,"clone","regex","",15,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",15,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",15,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"regex"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",15,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",15,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",15,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",15,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",15,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",15,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",15,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",15,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",15,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",15,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced string.",15,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",15,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",15,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",15,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",15,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",15,{"inputs":[{"name":"regex"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",15,{"inputs":[{"name":"regex"}],"output":{"name":"usize"}}],[11,"next","","",16,{"inputs":[{"name":"capturenames"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"reg_replace","","",0,{"inputs":[{"name":"noexpand"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","",0,{"inputs":[{"name":"noexpand"}],"output":{"name":"option"}}],[11,"next","","",17,{"inputs":[{"name":"regexsplits"}],"output":{"name":"option"}}],[11,"next","","",18,{"inputs":[{"name":"regexsplitsn"}],"output":{"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original string matched.",19,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",19,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",19,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",19,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",19,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",19,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",19,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",19,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",19,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"captures"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",19,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",19,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",20,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",22,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"next","","",23,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",24,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"regexset"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",25,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",25,{"inputs":[{"name":"regexset"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",25,{"inputs":[{"name":"regexset"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",25,{"inputs":[{"name":"regexset"}],"output":{"name":"usize"}}],[11,"fmt","","",26,{"inputs":[{"name":"setmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatches"}}],[11,"matched_any","","Whether this set contains any matches.",26,{"inputs":[{"name":"setmatches"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",26,{"inputs":[{"name":"setmatches"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",26,{"inputs":[{"name":"setmatches"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",26,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",26,{"inputs":[{"name":"setmatches"}],"output":{"name":"intoiter"}}],[11,"next","","",27,{"inputs":[{"name":"setmatchesintoiter"}],"output":{"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"setmatchesiter"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",28,{"inputs":[{"name":"setmatchesiter"}],"output":{"name":"option"}}],[11,"clone","regex::bytes","",29,{"inputs":[{"name":"regexset"}],"output":{"name":"regexsetbytes"}}],[11,"new","","Create a new regex set with the given regular expressions.",29,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",29,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",29,null],[11,"len","","Returns the total number of regular expressions in this set.",29,{"inputs":[{"name":"regexset"}],"output":{"name":"usize"}}],[11,"fmt","","",30,{"inputs":[{"name":"setmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatchesbytes"}}],[11,"matched_any","","Whether this set contains any matches.",30,{"inputs":[{"name":"setmatches"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",30,{"inputs":[{"name":"setmatches"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",30,{"inputs":[{"name":"setmatches"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",30,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatchesiterbytes"}}],[11,"into_iter","","",30,{"inputs":[{"name":"setmatches"}],"output":{"name":"intoiter"}}],[11,"next","","",31,{"inputs":[{"name":"setmatchesintoiterbytes"}],"output":{"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"setmatchesiterbytes"}],"output":{"name":"setmatchesiterbytes"}}],[11,"next","","",32,{"inputs":[{"name":"setmatchesiterbytes"}],"output":{"name":"option"}}],[11,"fmt","regex","",25,{"inputs":[{"name":"regexset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","regex::bytes","",29,{"inputs":[{"name":"regexset"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Replacer","regex","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",33,{"inputs":[{"name":"replacer"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",33,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",33,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"Vec"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIterBytes"],[3,"SetMatchesIterBytes"],[8,"Replacer"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"characterset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"fmt","","",20,{"inputs":[{"name":"newline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"fmt","","",18,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",14,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",16,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",21,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",23,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["flate2"] = {"doc":"A DEFLATE-based stream compression/decompression library","items":[[3,"GzBuilder","flate2","A builder structure to create a new gzip Encoder.",null,null],[3,"GzHeader","","A structure representing the header of a gzip stream.",null,null],[3,"Compress","","Raw in-memory compression stream for blocks of data.",null,null],[3,"Decompress","","Raw in-memory decompression stream for blocks of data.",null,null],[3,"DataError","","Error returned when a decompression object finds that the input stream of\nbytes was not a valid input stream of bytes.",null,null],[4,"Status","","Possible status results of compressing some data or successfully\ndecompressing a block of data.",null,null],[13,"Ok","","Indicates success.",0,null],[13,"BufError","","Indicates that forward progress is not possible due to input or output\nbuffers being empty.",0,null],[13,"StreamEnd","","Indicates that all input has been consumed and all output bytes have\nbeen written. Decompression/compression should not be called again.",0,null],[4,"Flush","","Values which indicate the form of flushing to be used when compressing or\ndecompressing in-memory data.",null,null],[13,"None","","A typical parameter for passing to compression/decompression functions,\nthis indicates that the underlying stream to decide how much data to\naccumulate before producing output in order to maximize compression.",1,null],[13,"Sync","","All pending output is flushed to the output buffer and the output is\naligned on a byte boundary so that the decompressor can get all input\ndata available so far.",1,null],[13,"Partial","","All pending output is flushed to the output buffer, but the output is\nnot aligned to a byte boundary.",1,null],[13,"Block","","A deflate block is completed and emitted, as for `Flush::Sync`, but the\noutput is not aligned on a byte boundary and up to seven vits of the\ncurrent block are held to be written as the next byte after the next\ndeflate block is completed.",1,null],[13,"Full","","All output is flushed as with `Flush::Sync` and the compression state is\nreset so decompression can restart from this point if previous\ncompressed data has been damaged or if random access is desired.",1,null],[13,"Finish","","Pending input is processed and pending output is flushed.",1,null],[4,"Compression","","When compressing data, the compression level can be specified by a value in\nthis enum.",null,null],[13,"None","","No compression is to be performed, this may actually inflate data\nslightly when encoding.",2,null],[13,"Fast","","Optimize for the best speed of encoding.",2,null],[13,"Best","","Optimize for the size of data being encoded.",2,null],[13,"Default","","Choose the default compression, a balance between speed and size.",2,null],[11,"new","","Create a new blank builder with no header by default.",3,{"inputs":[],"output":{"name":"builder"}}],[11,"mtime","","Configure the `mtime` field in the gzip header.",3,{"inputs":[{"name":"gzbuilder"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"extra","","Configure the `extra` field in the gzip header.",3,{"inputs":[{"name":"gzbuilder"},{"name":"vec"}],"output":{"name":"builder"}}],[11,"filename","","Configure the `filename` field in the gzip header.",3,null],[11,"comment","","Configure the `comment` field in the gzip header.",3,null],[11,"write","","Consume this builder, creating a writer encoder in the process.",3,{"inputs":[{"name":"gzbuilder"},{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"read","","Consume this builder, creating a reader encoder in the process.",3,{"inputs":[{"name":"gzbuilder"},{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"filename","","Returns the `filename` field of this gzip stream&#39;s header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"option"}}],[11,"extra","","Returns the `extra` field of this gzip stream&#39;s header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"option"}}],[11,"comment","","Returns the `comment` field of this gzip stream&#39;s header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"option"}}],[11,"mtime","","Returns the `mtime` field of this gzip stream&#39;s header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"u32"}}],[11,"fmt","","",5,{"inputs":[{"name":"dataerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new object ready for compressing data that it&#39;s given.",6,{"inputs":[{"name":"compression"},{"name":"bool"}],"output":{"name":"compress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by\nthis compression object.",6,{"inputs":[{"name":"compress"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by\nthis compression object.",6,{"inputs":[{"name":"compress"}],"output":{"name":"u64"}}],[11,"reset","","Quickly resets this compressor without having to reallocate anything.",6,{"inputs":[{"name":"compress"}],"output":null}],[11,"compress","","Compresses the input data into the output, consuming only as much\ninput as needed and writing as much output as possible.",6,null],[11,"compress_vec","","Compresses the input data into the extra space of the output, consuming\nonly as much input as needed and writing as much output as possible.",6,null],[11,"new","","Creates a new object ready for decompressing data that it&#39;s given.",7,{"inputs":[{"name":"bool"}],"output":{"name":"decompress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by\nthis decompression object.",7,{"inputs":[{"name":"decompress"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by\nthis decompression object.",7,{"inputs":[{"name":"decompress"}],"output":{"name":"u64"}}],[11,"decompress","","Decompresses the input data into the output, consuming only as much\ninput as needed and writing as much output as possible.",7,null],[11,"decompress_vec","","Decompresses the input data into the extra space in the output vector\nspecified by `output`.",7,null],[11,"description","","",5,{"inputs":[{"name":"dataerror"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"dataerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","","Types which operate over `Reader` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::read","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[0,"write","flate2","Types which operate over `Writer` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::write","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[8,"FlateReadExt","flate2","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,{"inputs":[{"name":"flatereadext"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"gz_decode","","Consume this reader to create a decompression stream of this stream.",8,{"inputs":[{"name":"flatereadext"}],"output":{"name":"result"}}],[11,"zlib_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,{"inputs":[{"name":"flatereadext"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"zlib_decode","","Consume this reader to create a decompression stream of this stream.",8,{"inputs":[{"name":"flatereadext"}],"output":{"name":"zlibdecoder"}}],[11,"deflate_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,{"inputs":[{"name":"flatereadext"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"deflate_decode","","Consume this reader to create a decompression stream of this stream.",8,{"inputs":[{"name":"flatereadext"}],"output":{"name":"deflatedecoder"}}],[8,"FlateWriteExt","","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,{"inputs":[{"name":"flatewriteext"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"zlib_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,{"inputs":[{"name":"flatewriteext"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"zlib_decode","","Consume this writer to create a decompression stream of this stream.",9,{"inputs":[{"name":"flatewriteext"}],"output":{"name":"zlibdecoder"}}],[11,"deflate_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,{"inputs":[{"name":"flatewriteext"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"deflate_decode","","Consume this writer to create a decompression stream of this stream.",9,{"inputs":[{"name":"flatewriteext"}],"output":{"name":"deflatedecoder"}}],[11,"clone","","",2,{"inputs":[{"name":"compression"}],"output":{"name":"compression"}}],[11,"new","flate2::write","Creates a new encoder which will write compressed data to the stream\ngiven at the given compression level.",10,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output\nstream for another.",10,{"inputs":[{"name":"deflateencoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",10,{"inputs":[{"name":"deflateencoder"}],"output":{"name":"result"}}],[11,"write","","",10,null],[11,"flush","","",10,{"inputs":[{"name":"deflateencoder"}],"output":{"name":"result"}}],[11,"new","flate2::read","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",11,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",11,{"inputs":[{"name":"deflateencoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",11,{"inputs":[{"name":"deflateencoder"}],"output":{"name":"r"}}],[11,"read","","",11,null],[11,"new","","Creates a new decoder which will decompress data read from the given\nstream.",12,{"inputs":[{"name":"r"}],"output":{"name":"decoderreader"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",12,{"inputs":[{"name":"r"},{"name":"vec"}],"output":{"name":"decoderreader"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",12,{"inputs":[{"name":"deflatedecoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",12,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",12,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",12,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"read","","",12,null],[11,"new","flate2::write","Creates a new decoder which will write uncompressed data to the stream.",13,{"inputs":[{"name":"w"}],"output":{"name":"decoderwriter"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output\nstream for another.",13,{"inputs":[{"name":"deflatedecoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",13,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for\ndecompression.",13,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its\noutput stream.",13,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",14,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"finish","","Finish encoding this stream, returning the underlying writer once the\nencoding is done.",14,{"inputs":[{"name":"gzencoder"}],"output":{"name":"result"}}],[11,"write","","",14,null],[11,"flush","","",14,{"inputs":[{"name":"gzencoder"}],"output":{"name":"result"}}],[11,"drop","","",14,{"inputs":[{"name":"gzencoder"}],"output":null}],[11,"new","flate2::read","Creates a new encoder which will use the given compression level.",15,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",15,{"inputs":[{"name":"gzencoder"}],"output":{"name":"r"}}],[11,"read","","",15,null],[11,"new","","Creates a new decoder from the given reader, immediately parsing the\ngzip header.",16,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header associated with this stream.",16,{"inputs":[{"name":"gzdecoder"}],"output":{"name":"header"}}],[11,"read","","",16,null],[11,"new","flate2::write","Creates a new encoder which will write compressed data to the stream\ngiven at the given compression level.",17,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output\nstream for another.",17,{"inputs":[{"name":"zlibencoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",17,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"result"}}],[11,"write","","",17,null],[11,"flush","","",17,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"result"}}],[11,"new","flate2::read","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",18,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",18,{"inputs":[{"name":"zlibencoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",18,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"r"}}],[11,"read","","",18,null],[11,"new","","Creates a new decoder which will decompress data read from the given\nstream.",19,{"inputs":[{"name":"r"}],"output":{"name":"decoderreader"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",19,{"inputs":[{"name":"r"},{"name":"vec"}],"output":{"name":"decoderreader"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",19,{"inputs":[{"name":"zlibdecoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",19,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",19,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",19,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"read","","",19,null],[11,"new","flate2::write","Creates a new decoder which will write uncompressed data to the stream.",20,{"inputs":[{"name":"w"}],"output":{"name":"decoderwriter"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output\nstream for another.",20,{"inputs":[{"name":"zlibdecoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",20,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for\ndecompression.",20,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its\noutput stream.",20,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"write","","",20,null],[11,"flush","","",20,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"result"}}]],"paths":[[4,"Status"],[4,"Flush"],[4,"Compression"],[3,"GzBuilder"],[3,"GzHeader"],[3,"DataError"],[3,"Compress"],[3,"Decompress"],[8,"FlateReadExt"],[8,"FlateWriteExt"],[3,"DeflateEncoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateDecoder"],[3,"GzEncoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"ZlibEncoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibDecoder"]]};
searchIndex["aho_corasick"] = {"doc":"An implementation of the\n[Aho-Corasick string search algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm).","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"eq","","",0,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"match"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"match"}],"output":{"name":"match"}}],[11,"fmt","","",1,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"streammatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"streammatches"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"matchesoverlapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"matchesoverlapping"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"streammatchesoverlapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"streammatchesoverlapping"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"fullacautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"automaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"transitions"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"transitions"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"transitions"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"acautomaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",9,{"inputs":[{"name":"dense"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"dense"}],"output":{"name":"dense"}}],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"dense"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"dense"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"dense"}],"output":{"name":"usize"}}],[11,"fmt","","",10,{"inputs":[{"name":"sparse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"sparse"}],"output":{"name":"sparse"}}],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"sparse"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"sparse"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"sparse"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"acautomaton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library\nimplementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10&lt;sup&gt;9&lt;/sup&gt; - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"outofrangeerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"str"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",6,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"threadlocal"}],"output":null}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"threadlocal"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",0,{"inputs":[{"name":"threadlocal"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",0,{"inputs":[{"name":"threadlocal"}],"output":{"name":"t"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",1,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",1,{"inputs":[{"name":"cachedthreadlocal"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",1,{"inputs":[{"name":"cachedthreadlocal"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",1,{"inputs":[{"name":"cachedthreadlocal"}],"output":{"name":"t"}}]],"paths":[[3,"ThreadLocal"],[3,"CachedThreadLocal"]]};
searchIndex["miniz_sys"] = {"doc":"","items":[[3,"mz_stream","miniz_sys","",null,null],[12,"next_in","","",0,null],[12,"avail_in","","",0,null],[12,"total_in","","",0,null],[12,"next_out","","",0,null],[12,"avail_out","","",0,null],[12,"total_out","","",0,null],[12,"msg","","",0,null],[12,"state","","",0,null],[12,"zalloc","","",0,null],[12,"zfree","","",0,null],[12,"opaque","","",0,null],[12,"data_type","","",0,null],[12,"adler","","",0,null],[12,"reserved","","",0,null],[4,"mz_internal_state","","",null,null],[5,"mz_deflateInit2","","",null,null],[5,"mz_deflate","","",null,null],[5,"mz_deflateEnd","","",null,null],[5,"mz_deflateReset","","",null,null],[5,"mz_inflateInit2","","",null,null],[5,"mz_inflate","","",null,null],[5,"mz_inflateEnd","","",null,null],[5,"mz_crc32","","",null,null],[6,"mz_alloc_func","","",null,null],[6,"mz_free_func","","",null,null],[17,"MZ_NO_FLUSH","","",null,null],[17,"MZ_PARTIAL_FLUSH","","",null,null],[17,"MZ_SYNC_FLUSH","","",null,null],[17,"MZ_FULL_FLUSH","","",null,null],[17,"MZ_FINISH","","",null,null],[17,"MZ_BLOCK","","",null,null],[17,"MZ_OK","","",null,null],[17,"MZ_STREAM_END","","",null,null],[17,"MZ_NEED_DICT","","",null,null],[17,"MZ_ERRNO","","",null,null],[17,"MZ_STREAM_ERROR","","",null,null],[17,"MZ_DATA_ERROR","","",null,null],[17,"MZ_MEM_ERROR","","",null,null],[17,"MZ_BUF_ERROR","","",null,null],[17,"MZ_VERSION_ERROR","","",null,null],[17,"MZ_PARAM_ERROR","","",null,null],[17,"MZ_DEFLATED","","",null,null],[17,"MZ_DEFAULT_WINDOW_BITS","","",null,null],[17,"MZ_DEFAULT_STRATEGY","","",null,null]],"paths":[[3,"mz_stream"]]};
searchIndex["libsodium_sys"] = {"doc":"","items":[[3,"crypto_auth_hmacsha256_state","libsodium_sys","",null,null],[3,"crypto_auth_hmacsha512_state","","",null,null],[3,"crypto_hash_sha256_state","","",null,null],[3,"crypto_hash_sha512_state","","",null,null],[5,"sodium_init","","",null,null],[5,"crypto_aead_chacha20poly1305_keybytes","","",null,null],[5,"crypto_aead_chacha20poly1305_nsecbytes","","",null,null],[5,"crypto_aead_chacha20poly1305_npubbytes","","",null,null],[5,"crypto_aead_chacha20poly1305_abytes","","",null,null],[5,"crypto_aead_chacha20poly1305_encrypt","","",null,null],[5,"crypto_aead_chacha20poly1305_decrypt","","",null,null],[5,"crypto_auth_bytes","","",null,null],[5,"crypto_auth_keybytes","","",null,null],[5,"crypto_auth_primitive","","",null,null],[5,"crypto_auth","","",null,null],[5,"crypto_auth_verify","","",null,null],[5,"crypto_auth_hmacsha256_bytes","","",null,null],[5,"crypto_auth_hmacsha256_keybytes","","",null,null],[5,"crypto_auth_hmacsha256","","",null,null],[5,"crypto_auth_hmacsha256_verify","","",null,null],[5,"crypto_auth_hmacsha256_init","","",null,null],[5,"crypto_auth_hmacsha256_update","","",null,null],[5,"crypto_auth_hmacsha256_final","","",null,null],[5,"crypto_auth_hmacsha512_bytes","","",null,null],[5,"crypto_auth_hmacsha512_keybytes","","",null,null],[5,"crypto_auth_hmacsha512","","",null,null],[5,"crypto_auth_hmacsha512_verify","","",null,null],[5,"crypto_auth_hmacsha512_init","","",null,null],[5,"crypto_auth_hmacsha512_update","","",null,null],[5,"crypto_auth_hmacsha512_final","","",null,null],[5,"crypto_auth_hmacsha512256_bytes","","",null,null],[5,"crypto_auth_hmacsha512256_keybytes","","",null,null],[5,"crypto_auth_hmacsha512256","","",null,null],[5,"crypto_auth_hmacsha512256_verify","","",null,null],[5,"crypto_auth_hmacsha512256_init","","",null,null],[5,"crypto_auth_hmacsha512256_update","","",null,null],[5,"crypto_auth_hmacsha512256_final","","",null,null],[5,"crypto_box_seedbytes","","",null,null],[5,"crypto_box_publickeybytes","","",null,null],[5,"crypto_box_secretkeybytes","","",null,null],[5,"crypto_box_beforenmbytes","","",null,null],[5,"crypto_box_noncebytes","","",null,null],[5,"crypto_box_zerobytes","","",null,null],[5,"crypto_box_boxzerobytes","","",null,null],[5,"crypto_box_macbytes","","",null,null],[5,"crypto_box_primitive","","",null,null],[5,"crypto_box_sealbytes","","",null,null],[5,"crypto_box_seed_keypair","","",null,null],[5,"crypto_box_keypair","","",null,null],[5,"crypto_box_beforenm","","",null,null],[5,"crypto_box_afternm","","",null,null],[5,"crypto_box_open_afternm","","",null,null],[5,"crypto_box","","",null,null],[5,"crypto_box_open","","",null,null],[5,"crypto_box_easy","","",null,null],[5,"crypto_box_open_easy","","",null,null],[5,"crypto_box_detached","","",null,null],[5,"crypto_box_open_detached","","",null,null],[5,"crypto_box_seal","","",null,null],[5,"crypto_box_seal_open","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_keypair","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_open","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_beforenm","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_afternm","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_open_afternm","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_seedbytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_publickeybytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_secretkeybytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_beforenmbytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_noncebytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_zerobytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_boxzerobytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_macbytes","","",null,null],[5,"crypto_core_hsalsa20_outputbytes","","",null,null],[5,"crypto_core_hsalsa20_inputbytes","","",null,null],[5,"crypto_core_hsalsa20_keybytes","","",null,null],[5,"crypto_core_hsalsa20_constbytes","","",null,null],[5,"crypto_core_hsalsa20","","",null,null],[5,"crypto_core_salsa20_outputbytes","","",null,null],[5,"crypto_core_salsa20_inputbytes","","",null,null],[5,"crypto_core_salsa20_keybytes","","",null,null],[5,"crypto_core_salsa20_constbytes","","",null,null],[5,"crypto_core_salsa20","","",null,null],[5,"crypto_core_salsa2012_outputbytes","","",null,null],[5,"crypto_core_salsa2012_inputbytes","","",null,null],[5,"crypto_core_salsa2012_keybytes","","",null,null],[5,"crypto_core_salsa2012_constbytes","","",null,null],[5,"crypto_core_salsa2012","","",null,null],[5,"crypto_core_salsa208_outputbytes","","",null,null],[5,"crypto_core_salsa208_inputbytes","","",null,null],[5,"crypto_core_salsa208_keybytes","","",null,null],[5,"crypto_core_salsa208_constbytes","","",null,null],[5,"crypto_core_salsa208","","",null,null],[5,"crypto_generichash_bytes_min","","",null,null],[5,"crypto_generichash_bytes_max","","",null,null],[5,"crypto_generichash_bytes","","",null,null],[5,"crypto_generichash_keybytes_min","","",null,null],[5,"crypto_generichash_keybytes_max","","",null,null],[5,"crypto_generichash_keybytes","","",null,null],[5,"crypto_generichash_primitive","","",null,null],[5,"crypto_generichash","","",null,null],[5,"crypto_generichash_blake2b_bytes_min","","",null,null],[5,"crypto_generichash_blake2b_bytes_max","","",null,null],[5,"crypto_generichash_blake2b_bytes","","",null,null],[5,"crypto_generichash_blake2b_keybytes_min","","",null,null],[5,"crypto_generichash_blake2b_keybytes_max","","",null,null],[5,"crypto_generichash_blake2b_keybytes","","",null,null],[5,"crypto_generichash_blake2b_saltbytes","","",null,null],[5,"crypto_generichash_blake2b_personalbytes","","",null,null],[5,"crypto_generichash_blake2b","","",null,null],[5,"crypto_generichash_blake2b_salt_personal","","",null,null],[5,"crypto_hash_bytes","","",null,null],[5,"crypto_hash","","",null,null],[5,"crypto_hash_primitive","","",null,null],[5,"crypto_hash_sha256_bytes","","",null,null],[5,"crypto_hash_sha256","","",null,null],[5,"crypto_hash_sha256_init","","",null,null],[5,"crypto_hash_sha256_update","","",null,null],[5,"crypto_hash_sha256_final","","",null,null],[5,"crypto_hash_sha512_bytes","","",null,null],[5,"crypto_hash_sha512","","",null,null],[5,"crypto_hash_sha512_init","","",null,null],[5,"crypto_hash_sha512_update","","",null,null],[5,"crypto_hash_sha512_final","","",null,null],[5,"crypto_onetimeauth_bytes","","",null,null],[5,"crypto_onetimeauth_keybytes","","",null,null],[5,"crypto_onetimeauth_primitive","","",null,null],[5,"crypto_onetimeauth_poly1305","","",null,null],[5,"crypto_onetimeauth_poly1305_verify","","",null,null],[5,"crypto_onetimeauth_poly1305_bytes","","",null,null],[5,"crypto_onetimeauth_poly1305_keybytes","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_saltbytes","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_strbytes","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_strprefix","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_opslimit_interactive","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_memlimit_interactive","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_str","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_str_verify","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_ll","","",null,null],[5,"crypto_scalarmult_bytes","","",null,null],[5,"crypto_scalarmult_scalarbytes","","",null,null],[5,"crypto_scalarmult_primitive","","",null,null],[5,"crypto_scalarmult_base","","",null,null],[5,"crypto_scalarmult","","",null,null],[5,"crypto_scalarmult_curve25519_bytes","","",null,null],[5,"crypto_scalarmult_curve25519_scalarbytes","","",null,null],[5,"crypto_scalarmult_curve25519_base","","",null,null],[5,"crypto_scalarmult_curve25519","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_open","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_keybytes","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_noncebytes","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_zerobytes","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_boxzerobytes","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_macbytes","","",null,null],[5,"crypto_shorthash_siphash24","","",null,null],[5,"crypto_shorthash_siphash24_bytes","","",null,null],[5,"crypto_shorthash_siphash24_keybytes","","",null,null],[5,"crypto_sign_ed25519_keypair","","",null,null],[5,"crypto_sign_ed25519_seed_keypair","","",null,null],[5,"crypto_sign_ed25519","","",null,null],[5,"crypto_sign_ed25519_open","","",null,null],[5,"crypto_sign_ed25519_detached","","",null,null],[5,"crypto_sign_ed25519_verify_detached","","",null,null],[5,"crypto_sign_ed25519_bytes","","",null,null],[5,"crypto_sign_ed25519_seedbytes","","",null,null],[5,"crypto_sign_ed25519_publickeybytes","","",null,null],[5,"crypto_sign_ed25519_secretkeybytes","","",null,null],[5,"crypto_stream_keybytes","","",null,null],[5,"crypto_stream_noncebytes","","",null,null],[5,"crypto_stream_primitive","","",null,null],[5,"crypto_stream_aes128ctr","","",null,null],[5,"crypto_stream_aes128ctr_xor","","",null,null],[5,"crypto_stream_aes128ctr_keybytes","","",null,null],[5,"crypto_stream_aes128ctr_noncebytes","","",null,null],[5,"crypto_stream_aes128ctr_beforenmbytes","","",null,null],[5,"crypto_stream_chacha20","","",null,null],[5,"crypto_stream_chacha20_xor","","",null,null],[5,"crypto_stream_chacha20_keybytes","","",null,null],[5,"crypto_stream_chacha20_noncebytes","","",null,null],[5,"crypto_stream_salsa20","","",null,null],[5,"crypto_stream_salsa20_xor","","",null,null],[5,"crypto_stream_salsa20_keybytes","","",null,null],[5,"crypto_stream_salsa20_noncebytes","","",null,null],[5,"crypto_stream_salsa2012","","",null,null],[5,"crypto_stream_salsa2012_xor","","",null,null],[5,"crypto_stream_salsa2012_keybytes","","",null,null],[5,"crypto_stream_salsa2012_noncebytes","","",null,null],[5,"crypto_stream_salsa208","","",null,null],[5,"crypto_stream_salsa208_xor","","",null,null],[5,"crypto_stream_salsa208_keybytes","","",null,null],[5,"crypto_stream_salsa208_noncebytes","","",null,null],[5,"crypto_stream_xsalsa20","","",null,null],[5,"crypto_stream_xsalsa20_xor","","",null,null],[5,"crypto_stream_xsalsa20_keybytes","","",null,null],[5,"crypto_stream_xsalsa20_noncebytes","","",null,null],[5,"crypto_verify_16_bytes","","",null,null],[5,"crypto_verify_16","","",null,null],[5,"crypto_verify_32_bytes","","",null,null],[5,"crypto_verify_32","","",null,null],[5,"crypto_verify_64_bytes","","",null,null],[5,"crypto_verify_64","","",null,null],[5,"randombytes_buf","","",null,null],[5,"sodium_memzero","","",null,null],[5,"sodium_memcmp","","",null,null],[5,"sodium_increment","","",null,null],[5,"sodium_mlock","","",null,null],[5,"sodium_munlock","","",null,null],[5,"sodium_malloc","","",null,null],[5,"sodium_allocarray","","",null,null],[5,"sodium_free","","",null,null],[5,"sodium_mprotect_noaccess","","",null,null],[5,"sodium_mprotect_readonly","","",null,null],[5,"sodium_mprotect_readwrite","","",null,null],[6,"crypto_auth_hmacsha512256_state","","",null,null],[17,"crypto_aead_chacha20poly1305_KEYBYTES","","",null,null],[17,"crypto_aead_chacha20poly1305_NSECBYTES","","",null,null],[17,"crypto_aead_chacha20poly1305_NPUBBYTES","","",null,null],[17,"crypto_aead_chacha20poly1305_ABYTES","","",null,null],[17,"crypto_auth_BYTES","","",null,null],[17,"crypto_auth_KEYBYTES","","",null,null],[17,"crypto_auth_PRIMITIVE","","",null,null],[17,"crypto_auth_hmacsha256_BYTES","","",null,null],[17,"crypto_auth_hmacsha256_KEYBYTES","","",null,null],[17,"crypto_auth_hmacsha512_BYTES","","",null,null],[17,"crypto_auth_hmacsha512_KEYBYTES","","",null,null],[17,"crypto_auth_hmacsha512256_BYTES","","",null,null],[17,"crypto_auth_hmacsha512256_KEYBYTES","","",null,null],[17,"crypto_box_SEEDBYTES","","",null,null],[17,"crypto_box_PUBLICKEYBYTES","","",null,null],[17,"crypto_box_SECRETKEYBYTES","","",null,null],[17,"crypto_box_BEFORENMBYTES","","",null,null],[17,"crypto_box_NONCEBYTES","","",null,null],[17,"crypto_box_ZEROBYTES","","",null,null],[17,"crypto_box_BOXZEROBYTES","","",null,null],[17,"crypto_box_MACBYTES","","",null,null],[17,"crypto_box_PRIMITIVE","","",null,null],[17,"crypto_box_SEALBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_SEEDBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_NONCEBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_ZEROBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_MACBYTES","","",null,null],[17,"crypto_core_hsalsa20_OUTPUTBYTES","","",null,null],[17,"crypto_core_hsalsa20_INPUTBYTES","","",null,null],[17,"crypto_core_hsalsa20_KEYBYTES","","",null,null],[17,"crypto_core_hsalsa20_CONSTBYTES","","",null,null],[17,"crypto_core_salsa20_OUTPUTBYTES","","",null,null],[17,"crypto_core_salsa20_INPUTBYTES","","",null,null],[17,"crypto_core_salsa20_KEYBYTES","","",null,null],[17,"crypto_core_salsa20_CONSTBYTES","","",null,null],[17,"crypto_core_salsa2012_OUTPUTBYTES","","",null,null],[17,"crypto_core_salsa2012_INPUTBYTES","","",null,null],[17,"crypto_core_salsa2012_KEYBYTES","","",null,null],[17,"crypto_core_salsa2012_CONSTBYTES","","",null,null],[17,"crypto_core_salsa208_OUTPUTBYTES","","",null,null],[17,"crypto_core_salsa208_INPUTBYTES","","",null,null],[17,"crypto_core_salsa208_KEYBYTES","","",null,null],[17,"crypto_core_salsa208_CONSTBYTES","","",null,null],[17,"crypto_generichash_BYTES_MIN","","",null,null],[17,"crypto_generichash_BYTES_MAX","","",null,null],[17,"crypto_generichash_BYTES","","",null,null],[17,"crypto_generichash_KEYBYTES_MIN","","",null,null],[17,"crypto_generichash_KEYBYTES_MAX","","",null,null],[17,"crypto_generichash_KEYBYTES","","",null,null],[17,"crypto_generichash_PRIMITIVE","","",null,null],[17,"crypto_generichash_blake2b_BYTES_MIN","","",null,null],[17,"crypto_generichash_blake2b_BYTES_MAX","","",null,null],[17,"crypto_generichash_blake2b_BYTES","","",null,null],[17,"crypto_generichash_blake2b_KEYBYTES_MIN","","",null,null],[17,"crypto_generichash_blake2b_KEYBYTES_MAX","","",null,null],[17,"crypto_generichash_blake2b_KEYBYTES","","",null,null],[17,"crypto_generichash_blake2b_SALTBYTES","","",null,null],[17,"crypto_generichash_blake2b_PERSONALBYTES","","",null,null],[17,"crypto_hash_BYTES","","",null,null],[17,"crypto_hash_PRIMITIVE","","",null,null],[17,"crypto_hash_sha256_BYTES","","",null,null],[17,"crypto_hash_sha512_BYTES","","",null,null],[17,"crypto_onetimeauth_BYTES","","",null,null],[17,"crypto_onetimeauth_KEYBYTES","","",null,null],[17,"crypto_onetimeauth_PRIMITIVE","","",null,null],[17,"crypto_onetimeauth_poly1305_BYTES","","",null,null],[17,"crypto_onetimeauth_poly1305_KEYBYTES","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_SALTBYTES","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_STRBYTES","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_STRPREFIX","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE","","",null,null],[17,"crypto_scalarmult_BYTES","","",null,null],[17,"crypto_scalarmult_SCALARBYTES","","",null,null],[17,"crypto_scalarmult_PRIMITIVE","","",null,null],[17,"crypto_scalarmult_curve25519_BYTES","","",null,null],[17,"crypto_scalarmult_curve25519_SCALARBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_KEYBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_NONCEBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_ZEROBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_MACBYTES","","",null,null],[17,"crypto_shorthash_siphash24_BYTES","","",null,null],[17,"crypto_shorthash_siphash24_KEYBYTES","","",null,null],[17,"crypto_sign_ed25519_BYTES","","",null,null],[17,"crypto_sign_ed25519_SEEDBYTES","","",null,null],[17,"crypto_sign_ed25519_PUBLICKEYBYTES","","",null,null],[17,"crypto_sign_ed25519_SECRETKEYBYTES","","",null,null],[17,"crypto_stream_KEYBYTES","","",null,null],[17,"crypto_stream_NONCEBYTES","","",null,null],[17,"crypto_stream_PRIMITIVE","","",null,null],[17,"crypto_stream_aes128ctr_KEYBYTES","","",null,null],[17,"crypto_stream_aes128ctr_NONCEBYTES","","",null,null],[17,"crypto_stream_aes128ctr_BEFORENMBYTES","","",null,null],[17,"crypto_stream_chacha20_KEYBYTES","","",null,null],[17,"crypto_stream_chacha20_NONCEBYTES","","",null,null],[17,"crypto_stream_salsa20_KEYBYTES","","",null,null],[17,"crypto_stream_salsa20_NONCEBYTES","","",null,null],[17,"crypto_stream_salsa2012_KEYBYTES","","",null,null],[17,"crypto_stream_salsa2012_NONCEBYTES","","",null,null],[17,"crypto_stream_salsa208_KEYBYTES","","",null,null],[17,"crypto_stream_salsa208_NONCEBYTES","","",null,null],[17,"crypto_stream_xsalsa20_KEYBYTES","","",null,null],[17,"crypto_stream_xsalsa20_NONCEBYTES","","",null,null],[17,"crypto_verify_16_BYTES","","",null,null],[17,"crypto_verify_32_BYTES","","",null,null],[17,"crypto_verify_64_BYTES","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"crypto_auth_hmacsha256_state"}],"output":{"name":"crypto_auth_hmacsha256_state"}}],[11,"clone","","",1,{"inputs":[{"name":"crypto_auth_hmacsha512_state"}],"output":{"name":"crypto_auth_hmacsha512_state"}}],[11,"clone","","",2,{"inputs":[{"name":"crypto_hash_sha256_state"}],"output":{"name":"crypto_hash_sha256_state"}}],[11,"clone","","",3,{"inputs":[{"name":"crypto_hash_sha512_state"}],"output":{"name":"crypto_hash_sha512_state"}}]],"paths":[[3,"crypto_auth_hmacsha256_state"],[3,"crypto_auth_hmacsha512_state"],[3,"crypto_hash_sha256_state"],[3,"crypto_hash_sha512_state"]]};
searchIndex["fs2"] = {"doc":"","items":[[5,"lock_contended_error","fs2","Returns the error that a call to a try lock method on a contended file will\nreturn.",null,{"inputs":[],"output":{"name":"error"}}],[5,"free_space","","Returns the number of free bytes in the file system containing the provided\npath.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"available_space","","Returns the available space in bytes to non-priveleged users in the file\nsystem containing the provided path.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"total_space","","Returns the total space in bytes in the file system containing the provided\npath.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"allocation_granularity","","Returns the filesystem&#39;s disk space allocation granularity in bytes.\nThe provided path may be for any file in the filesystem.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[8,"FileExt","","Extension trait for `File` providing duplication and locking methods.",null,null],[10,"duplicate","","Returns a duplicate instance of the file.",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[10,"allocated_size","","Returns the amount of physical space allocated for a file.",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[10,"allocate","","Ensures that at least `len` bytes of disk space are allocated for the\nfile, and the file size is at least `len` bytes. After a successful call\nto `allocate`, subsequent writes to the file within the specified length\nare guaranteed not to fail because of lack of disk space.",0,{"inputs":[{"name":"fileext"},{"name":"u64"}],"output":{"name":"result"}}],[10,"lock_shared","","Locks the file for shared usage, blocking if the file is currently\nlocked exclusively.",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[10,"lock_exclusive","","Locks the file for exclusive usage, blocking if the file is currently\nlocked.",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[10,"try_lock_shared","","Locks the file for shared usage, or returns a an error if the file is\ncurrently locked (see `lock_contended_error`).",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[10,"try_lock_exclusive","","Locks the file for shared usage, or returns a an error if the file is\ncurrently locked (see `lock_contended_error`).",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[10,"unlock","","Unlocks the file.",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[11,"duplicate","std::fs","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"allocated_size","","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"allocate","","",1,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"lock_shared","","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"lock_exclusive","","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"try_lock_shared","","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"try_lock_exclusive","","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"unlock","","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}]],"paths":[[8,"FileExt"],[3,"File"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.","items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",14,null],[12,"sin_port","","",14,null],[12,"sin_addr","","",14,null],[12,"sin_zero","","",14,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",15,null],[12,"sin6_port","","",15,null],[12,"sin6_flowinfo","","",15,null],[12,"sin6_addr","","",15,null],[12,"sin6_scope_id","","",15,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",16,null],[12,"sun_path","","",16,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",17,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",18,null],[12,"ai_family","","",18,null],[12,"ai_socktype","","",18,null],[12,"ai_protocol","","",18,null],[12,"ai_addrlen","","",18,null],[12,"ai_addr","","",18,null],[12,"ai_canonname","","",18,null],[12,"ai_next","","",18,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",19,null],[12,"nl_pid","","",19,null],[12,"nl_groups","","",19,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",21,null],[12,"tm_min","","",21,null],[12,"tm_hour","","",21,null],[12,"tm_mday","","",21,null],[12,"tm_mon","","",21,null],[12,"tm_year","","",21,null],[12,"tm_wday","","",21,null],[12,"tm_yday","","",21,null],[12,"tm_isdst","","",21,null],[12,"tm_gmtoff","","",21,null],[12,"tm_zone","","",21,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",22,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",23,null],[12,"dli_fbase","","",23,null],[12,"dli_sname","","",23,null],[12,"dli_saddr","","",23,null],[3,"epoll_event","","",null,null],[12,"events","","",24,null],[12,"u64","","",24,null],[3,"utsname","","",null,null],[12,"sysname","","",25,null],[12,"nodename","","",25,null],[12,"release","","",25,null],[12,"version","","",25,null],[12,"machine","","",25,null],[12,"domainname","","",25,null],[3,"lconv","","",null,null],[12,"decimal_point","","",26,null],[12,"thousands_sep","","",26,null],[12,"grouping","","",26,null],[12,"int_curr_symbol","","",26,null],[12,"currency_symbol","","",26,null],[12,"mon_decimal_point","","",26,null],[12,"mon_thousands_sep","","",26,null],[12,"mon_grouping","","",26,null],[12,"positive_sign","","",26,null],[12,"negative_sign","","",26,null],[12,"int_frac_digits","","",26,null],[12,"frac_digits","","",26,null],[12,"p_cs_precedes","","",26,null],[12,"p_sep_by_space","","",26,null],[12,"n_cs_precedes","","",26,null],[12,"n_sep_by_space","","",26,null],[12,"p_sign_posn","","",26,null],[12,"n_sign_posn","","",26,null],[12,"int_p_cs_precedes","","",26,null],[12,"int_p_sep_by_space","","",26,null],[12,"int_n_cs_precedes","","",26,null],[12,"int_n_sep_by_space","","",26,null],[12,"int_p_sign_posn","","",26,null],[12,"int_n_sign_posn","","",26,null],[3,"dirent","","",null,null],[12,"d_ino","","",27,null],[12,"d_off","","",27,null],[12,"d_reclen","","",27,null],[12,"d_type","","",27,null],[12,"d_name","","",27,null],[3,"dirent64","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",29,null],[12,"rlim_max","","",29,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",30,null],[12,"gl_pathv","","",30,null],[12,"gl_offs","","",30,null],[12,"gl_flags","","",30,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",31,null],[12,"ifa_name","","",31,null],[12,"ifa_flags","","",31,null],[12,"ifa_addr","","",31,null],[12,"ifa_netmask","","",31,null],[12,"ifa_ifu","","",31,null],[12,"ifa_data","","",31,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",32,null],[12,"pw_passwd","","",32,null],[12,"pw_uid","","",32,null],[12,"pw_gid","","",32,null],[12,"pw_gecos","","",32,null],[12,"pw_dir","","",32,null],[12,"pw_shell","","",32,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",33,null],[12,"f_frsize","","",33,null],[12,"f_blocks","","",33,null],[12,"f_bfree","","",33,null],[12,"f_bavail","","",33,null],[12,"f_files","","",33,null],[12,"f_ffree","","",33,null],[12,"f_favail","","",33,null],[12,"f_fsid","","",33,null],[12,"f_flag","","",33,null],[12,"f_namemax","","",33,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",34,null],[12,"dqb_bsoftlimit","","",34,null],[12,"dqb_curspace","","",34,null],[12,"dqb_ihardlimit","","",34,null],[12,"dqb_isoftlimit","","",34,null],[12,"dqb_curinodes","","",34,null],[12,"dqb_btime","","",34,null],[12,"dqb_itime","","",34,null],[12,"dqb_valid","","",34,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",35,null],[12,"ssi_errno","","",35,null],[12,"ssi_code","","",35,null],[12,"ssi_pid","","",35,null],[12,"ssi_uid","","",35,null],[12,"ssi_fd","","",35,null],[12,"ssi_tid","","",35,null],[12,"ssi_band","","",35,null],[12,"ssi_overrun","","",35,null],[12,"ssi_trapno","","",35,null],[12,"ssi_status","","",35,null],[12,"ssi_int","","",35,null],[12,"ssi_ptr","","",35,null],[12,"ssi_utime","","",35,null],[12,"ssi_stime","","",35,null],[12,"ssi_addr","","",35,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",36,null],[12,"mq_maxmsg","","",36,null],[12,"mq_msgsize","","",36,null],[12,"mq_curmsgs","","",36,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",37,null],[12,"sa_mask","","",37,null],[12,"sa_flags","","",37,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",38,null],[12,"ss_flags","","",38,null],[12,"ss_size","","",38,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",39,null],[12,"si_errno","","",39,null],[12,"si_code","","",39,null],[12,"_pad","","",39,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",40,null],[12,"gl_pathv","","",40,null],[12,"gl_offs","","",40,null],[12,"gl_flags","","",40,null],[3,"ucred","","",null,null],[12,"pid","","",41,null],[12,"uid","","",41,null],[12,"gid","","",41,null],[3,"statfs","","",null,null],[12,"f_type","","",42,null],[12,"f_bsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_fsid","","",42,null],[12,"f_namelen","","",42,null],[12,"f_frsize","","",42,null],[3,"msghdr","","",null,null],[12,"msg_name","","",43,null],[12,"msg_namelen","","",43,null],[12,"msg_iov","","",43,null],[12,"msg_iovlen","","",43,null],[12,"msg_control","","",43,null],[12,"msg_controllen","","",43,null],[12,"msg_flags","","",43,null],[3,"termios","","",null,null],[12,"c_iflag","","",44,null],[12,"c_oflag","","",44,null],[12,"c_cflag","","",44,null],[12,"c_lflag","","",44,null],[12,"c_line","","",44,null],[12,"c_cc","","",44,null],[12,"c_ispeed","","",44,null],[12,"c_ospeed","","",44,null],[3,"flock","","",null,null],[12,"l_type","","",45,null],[12,"l_whence","","",45,null],[12,"l_start","","",45,null],[12,"l_len","","",45,null],[12,"l_pid","","",45,null],[3,"ipc_perm","","",null,null],[12,"__key","","",46,null],[12,"uid","","",46,null],[12,"gid","","",46,null],[12,"cuid","","",46,null],[12,"cgid","","",46,null],[12,"mode","","",46,null],[12,"__seq","","",46,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",47,null],[12,"shm_segsz","","",47,null],[12,"shm_atime","","",47,null],[12,"shm_dtime","","",47,null],[12,"shm_ctime","","",47,null],[12,"shm_cpid","","",47,null],[12,"shm_lpid","","",47,null],[12,"shm_nattch","","",47,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",48,null],[12,"st_ino","","",48,null],[12,"st_nlink","","",48,null],[12,"st_mode","","",48,null],[12,"st_uid","","",48,null],[12,"st_gid","","",48,null],[12,"st_rdev","","",48,null],[12,"st_size","","",48,null],[12,"st_blksize","","",48,null],[12,"st_blocks","","",48,null],[12,"st_atime","","",48,null],[12,"st_atime_nsec","","",48,null],[12,"st_mtime","","",48,null],[12,"st_mtime_nsec","","",48,null],[12,"st_ctime","","",48,null],[12,"st_ctime_nsec","","",48,null],[3,"stat64","","",null,null],[12,"st_dev","","",49,null],[12,"st_ino","","",49,null],[12,"st_nlink","","",49,null],[12,"st_mode","","",49,null],[12,"st_uid","","",49,null],[12,"st_gid","","",49,null],[12,"st_rdev","","",49,null],[12,"st_size","","",49,null],[12,"st_blksize","","",49,null],[12,"st_blocks","","",49,null],[12,"st_atime","","",49,null],[12,"st_atime_nsec","","",49,null],[12,"st_mtime","","",49,null],[12,"st_mtime_nsec","","",49,null],[12,"st_ctime","","",49,null],[12,"st_ctime_nsec","","",49,null],[3,"pthread_attr_t","","",null,null],[3,"mcontext_t","","",null,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",50,null],[12,"uc_link","","",50,null],[12,"uc_stack","","",50,null],[12,"uc_mcontext","","",50,null],[12,"uc_sigmask","","",50,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fstat64","","",null,null],[5,"stat64","","",null,null],[5,"open64","","",null,null],[5,"creat64","","",null,null],[5,"lseek64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"mmap64","","",null,null],[5,"lstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"readdir64_r","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"getnameinfo","","",null,null],[5,"eventfd","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",51,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",51,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",51,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",51,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",51,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",51,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",51,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",51,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",51,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",51,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"option"}}],[11,"clone","","",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"eq","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"cmp","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"fmt","","",51,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",51,null],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",52,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",52,null],[11,"clone","libc","",48,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",49,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",53,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",54,{"inputs":[{"name":"mcontext_t"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",50,{"inputs":[{"name":"ucontext_t"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",55,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",37,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",38,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",39,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",40,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",41,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",42,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",43,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",44,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",45,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",46,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",47,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",27,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",28,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",29,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",30,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",31,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",56,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",57,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",58,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",59,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",32,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",33,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",34,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",35,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",60,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",36,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",61,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",17,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",18,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",19,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",62,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",21,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",22,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",23,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",24,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",25,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",26,{"inputs":[{"name":"lconv"}],"output":{"name":"lconv"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","","",12,{"inputs":[{"name":"winsize"}],"output":{"name":"winsize"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"stat"],[3,"stat64"],[3,"ucontext_t"],[4,"Option"],[8,"Clone"],[3,"pthread_attr_t"],[3,"mcontext_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P&lt;a&gt;.)(?P&lt;a&gt;.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P&lt;&gt;a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P&lt;0a&gt;b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P&lt;a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `b`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the bytes (`b`) flag was enabled.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"cmp","","",6,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"ordering"}}],[11,"clone","","",6,{"inputs":[{"name":"lit"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"literals"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"literals"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",5,{"inputs":[{"name":"literals"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,{"inputs":[{"name":"literals"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"all_complete","","Returns true if all members in this set are complete.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set&#39;s limits.",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are\nguaranteed to be unambiguous.",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are\nguaranteed to be unambiguous.",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,{"inputs":[{"name":"literals"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,{"inputs":[{"name":"literals"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,{"inputs":[{"name":"literals"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,{"inputs":[{"name":"literals"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,{"inputs":[{"name":"literals"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never\nbe extended.",5,{"inputs":[{"name":"literals"}],"output":null}],[11,"reverse","","Reverses all members in place.",5,{"inputs":[{"name":"literals"}],"output":null}],[11,"clear","","Clears this set of all members.",5,{"inputs":[{"name":"literals"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"literals"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was &quot;cut.&quot;",6,{"inputs":[{"name":"lit"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",6,{"inputs":[{"name":"lit"}],"output":null}],[11,"eq","","",6,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"lit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",6,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",7,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",7,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",7,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",7,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",7,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",7,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",7,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",7,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",7,null],[11,"as_slice","","Extracts a slice containing the entire vector.",7,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",7,null],[11,"set_len","","Sets the length of a vector.",7,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",7,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",7,null],[11,"push","","Appends an element to the back of a collection.",7,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",7,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",7,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",7,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",7,null],[11,"len","","Returns the number of elements in the vector.",7,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",7,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",7,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",7,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",7,null],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","","",7,null],[11,"as_mut","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",7,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"vec"}}],[11,"drop","","",7,null],[11,"cmp","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"extend","","",7,null],[11,"extend","","",7,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",7,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"deref_mut","","",7,null],[11,"deref","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",7,null],[11,"borrow_mut","","",7,null],[11,"borrow","","",7,null],[11,"from","","",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"deref","regex_syntax","",6,{"inputs":[{"name":"lit"}],"output":{"name":"vec"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"lit"}],"output":{"name":"vec"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"eq","","",2,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"expr"}],"output":{"name":"expr"}}],[11,"eq","","",3,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"repeater"}],"output":{"name":"repeater"}}],[11,"eq","","",8,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"classrange"}],"output":{"name":"classrange"}}],[11,"eq","","",9,{"inputs":[{"name":"byteclass"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"byteclass"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"byteclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"byteclass"}],"output":{"name":"byteclass"}}],[11,"cmp","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"byterange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"byterange"}],"output":{"name":"byterange"}}],[11,"fmt","","",10,{"inputs":[{"name":"exprbuilder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"new","","Create a new builder for configuring expression parsing.",10,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",10,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",10,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",10,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",10,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",10,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",10,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"allow_bytes","","Whether the Unicode flag can be used or not. By default, the flag is\nenabled but it cannot be toggled.",10,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",10,{"inputs":[{"name":"exprbuilder"},{"name":"usize"}],"output":{"name":"exprbuilder"}}],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",10,{"inputs":[{"name":"exprbuilder"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,{"inputs":[{"name":"expr"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,{"inputs":[{"name":"expr"}],"output":{"name":"literals"}}],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from\nthe beginning of text.",2,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the\nend of the text.",2,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions\nthat can match arbitrary bytes.",2,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[11,"deref","","",8,{"inputs":[{"name":"charclass"}],"output":{"name":"vec"}}],[11,"into_iter","","",8,{"inputs":[{"name":"charclass"}],"output":{"name":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",8,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",8,{"inputs":[{"name":"charclass"},{"name":"char"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given character from the class if it exists.",8,{"inputs":[{"name":"charclass"},{"name":"char"}],"output":null}],[11,"negate","","Negates the character class.",8,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",8,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"option"}}],[11,"new","","Create a new class from an existing set of ranges.",9,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",9,{"inputs":[{"name":"byteclass"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given byte from the class if it exists.",9,{"inputs":[{"name":"byteclass"},{"name":"u8"}],"output":null}],[11,"negate","","Negates the byte class.",9,{"inputs":[{"name":"byteclass"}],"output":{"name":"byteclass"}}],[11,"case_fold","","Apply case folding to this byte class.",9,{"inputs":[{"name":"byteclass"}],"output":{"name":"byteclass"}}],[11,"deref","","",9,{"inputs":[{"name":"byteclass"}],"output":{"name":"vec"}}],[11,"into_iter","","",9,{"inputs":[{"name":"byteclass"}],"output":{"name":"intoiter"}}],[11,"eq","","",1,{"inputs":[{"name":"byterange"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"byterange"},{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"byteclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"byterange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",4,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"position","","Returns an approximate *character* offset at which the error occurred.",11,{"inputs":[{"name":"error"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",11,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"description","","",11,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"Vec"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["argparse"] = {"doc":"","items":[[3,"StoreTrue","argparse","",null,null],[3,"StoreFalse","","",null,null],[3,"StoreConst","","",null,null],[12,"0","","",0,null],[3,"PushConst","","",null,null],[12,"0","","",1,null],[3,"Store","","",null,null],[3,"Parse","","",null,null],[3,"StoreOption","","",null,null],[3,"ParseOption","","",null,null],[3,"List","","",null,null],[3,"ParseList","","",null,null],[3,"Collect","","",null,null],[3,"ParseCollect","","",null,null],[3,"Print","","Print string and exit with status 0",null,null],[12,"0","","",2,null],[3,"IncrBy","","",null,null],[12,"0","","",3,null],[3,"DecrBy","","",null,null],[12,"0","","",4,null],[0,"action","","",null,null],[4,"ParseResult","argparse::action","",null,null],[13,"Parsed","","",5,null],[13,"Help","","",5,null],[13,"Exit","","",5,null],[13,"Error","","",5,null],[4,"Action","","",null,null],[13,"Flag","","",6,null],[13,"Single","","",6,null],[13,"Push","","",6,null],[13,"Many","","",6,null],[8,"TypedAction","","",null,null],[10,"bind","","",7,{"inputs":[{"name":"typedaction"},{"name":"rc"}],"output":{"name":"action"}}],[8,"IFlagAction","","",null,null],[10,"parse_flag","","",8,{"inputs":[{"name":"iflagaction"}],"output":{"name":"parseresult"}}],[8,"IArgAction","","",null,null],[10,"parse_arg","","",9,{"inputs":[{"name":"iargaction"},{"name":"str"}],"output":{"name":"parseresult"}}],[8,"IArgsAction","","",null,null],[10,"parse_args","","",10,null],[0,"parser","argparse","",null,null],[3,"Var","argparse::parser","",null,null],[3,"Ref","","",null,null],[3,"ArgumentParser","","The main argument parser class",null,null],[11,"hash","","",11,{"inputs":[{"name":"var"},{"name":"h"}],"output":null}],[11,"eq","","",11,{"inputs":[{"name":"var"},{"name":"var"}],"output":{"name":"bool"}}],[11,"add_option","","",12,null],[11,"add_argument","","",12,{"inputs":[{"name":"ref"},{"name":"str"},{"name":"a"},{"name":"str"}],"output":{"name":"ref"}}],[11,"metavar","","",12,{"inputs":[{"name":"ref"},{"name":"str"}],"output":{"name":"ref"}}],[11,"required","","",12,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"envvar","","",12,{"inputs":[{"name":"ref"},{"name":"str"}],"output":{"name":"ref"}}],[11,"new","","Create an empty argument parser",13,{"inputs":[],"output":{"name":"argumentparser"}}],[11,"refer","","Borrow mutable variable for an argument",13,{"inputs":[{"name":"argumentparser"},{"name":"t"}],"output":{"name":"box"}}],[11,"add_option","","Add option to argument parser",13,null],[11,"set_description","","Set description of the command",13,{"inputs":[{"name":"argumentparser"},{"name":"str"}],"output":null}],[11,"print_help","","Print help",13,{"inputs":[{"name":"argumentparser"},{"name":"str"},{"name":"write"}],"output":{"name":"ioresult"}}],[11,"print_usage","","Print usage",13,{"inputs":[{"name":"argumentparser"},{"name":"str"},{"name":"write"}],"output":{"name":"ioresult"}}],[11,"parse","","Parse arguments",13,{"inputs":[{"name":"argumentparser"},{"name":"vec"},{"name":"write"},{"name":"write"}],"output":{"name":"result"}}],[11,"error","","Write an error similar to one produced by the library itself",13,{"inputs":[{"name":"argumentparser"},{"name":"str"},{"name":"str"},{"name":"write"}],"output":null}],[11,"stop_on_first_argument","","Configure parser to ignore options when first non-option argument is\nencountered.",13,{"inputs":[{"name":"argumentparser"},{"name":"bool"}],"output":null}],[11,"silence_double_dash","","Do not put double-dash (bare `--`) into argument",13,{"inputs":[{"name":"argumentparser"},{"name":"bool"}],"output":null}],[11,"parse_args","","Convenience method to parse arguments",13,{"inputs":[{"name":"argumentparser"}],"output":{"name":"result"}}],[11,"parse_args_or_exit","","The simplest conveninece method",13,{"inputs":[{"name":"argumentparser"}],"output":null}],[11,"bind","argparse","",0,{"inputs":[{"name":"storeconst"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",1,{"inputs":[{"name":"pushconst"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",14,{"inputs":[{"name":"store"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",15,{"inputs":[{"name":"storeoption"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",16,{"inputs":[{"name":"list"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",17,{"inputs":[{"name":"collect"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",18,{"inputs":[{"name":"parse"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",19,{"inputs":[{"name":"parseoption"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",20,{"inputs":[{"name":"parselist"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",21,{"inputs":[{"name":"parsecollect"},{"name":"rc"}],"output":{"name":"action"}}],[11,"parse_flag","","",2,{"inputs":[{"name":"print"}],"output":{"name":"parseresult"}}],[11,"bind","","",22,{"inputs":[{"name":"storetrue"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",23,{"inputs":[{"name":"storefalse"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",3,{"inputs":[{"name":"incrby"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",4,{"inputs":[{"name":"decrby"},{"name":"rc"}],"output":{"name":"action"}}],[11,"from_argument","std::path","",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_argument","collections::string","",25,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_argument","std::net::ip","",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_argument","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_argument","std::net::addr","",28,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"FromCommandLine","argparse","",null,null],[10,"from_argument","","",29,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"StoreConst"],[3,"PushConst"],[3,"Print"],[3,"IncrBy"],[3,"DecrBy"],[4,"ParseResult"],[4,"Action"],[8,"TypedAction"],[8,"IFlagAction"],[8,"IArgAction"],[8,"IArgsAction"],[3,"Var"],[3,"Ref"],[3,"ArgumentParser"],[3,"Store"],[3,"StoreOption"],[3,"List"],[3,"Collect"],[3,"Parse"],[3,"ParseOption"],[3,"ParseList"],[3,"ParseCollect"],[3,"StoreTrue"],[3,"StoreFalse"],[3,"PathBuf"],[3,"String"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[8,"FromCommandLine"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["unreachable"] = {"doc":"# unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is\nstatically unreachable and can be removed.",null,{"inputs":[],"output":null}],[8,"UncheckedOptionExt","","An extension trait for `Option&lt;T&gt;` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"uncheckedoptionext"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"uncheckedoptionext"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result&lt;T, E&gt;` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"uncheckedresultext"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"uncheckedresultext"}],"output":{"name":"e"}}],[11,"unchecked_unwrap","core::option","",2,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unchecked_unwrap_none","","",2,{"inputs":[{"name":"option"}],"output":null}],[11,"unchecked_unwrap_ok","core::result","",3,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"unchecked_unwrap_err","","",3,{"inputs":[{"name":"result"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"],[4,"Option"],[4,"Result"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent\nranges of UTF-8 bytes. This is useful for constructing byte based automatons\nthat need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"eq","","",1,{"inputs":[{"name":"utf8sequence"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"utf8sequence"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"utf8sequence"}],"output":{"name":"utf8sequence"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"utf8sequence"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence\nof byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"utf8sequence"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"utf8range"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"utf8range"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"utf8range"}],"output":{"name":"utf8range"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"utf8range"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"utf8range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range\ngiven.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"utf8sequences"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["void"] = {"doc":"# Void","items":[[4,"Void","void","The empty type for cases which can&#39;t occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,{"inputs":[{"name":"void"}],"output":null}],[11,"fmt","core::fmt","",0,{"inputs":[{"name":"alignment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_char","void::coreprovider::fmt","Writes a `char` into this writer, returning whether the write succeeded.",2,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",2,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write_str","core::fmt","",3,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",3,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",3,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",3,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",3,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",3,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",3,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",3,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",3,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",3,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",3,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",3,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",3,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",3,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",3,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",3,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",3,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",3,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",3,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",3,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",3,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"fmt","","",4,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"entry","core::fmt::builders","Adds a new entry to the set output.",5,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",5,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",5,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",6,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",6,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",7,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",7,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",7,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",8,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",8,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",8,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",9,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",9,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"ne","void::coreprovider::cmp","This method tests for `!=`.",10,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"partial_cmp","core::cmp","",11,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",11,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"clone","","",11,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"eq","","",11,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lt","void::coreprovider::cmp","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",12,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",12,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",12,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",12,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"ResultVoidExt","void","Extensions to `Result&lt;T, Void&gt;`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",13,{"inputs":[{"name":"resultvoidext"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result&lt;Void, E&gt;`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",14,{"inputs":[{"name":"resultvoiderrext"}],"output":{"name":"e"}}],[11,"clone","","",15,{"inputs":[{"name":"void"}],"output":{"name":"void"}}],[11,"fmt","","",15,{"inputs":[{"name":"void"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"void"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"void"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"void"},{"name":"t"}],"output":{"name":"option"}}],[11,"void_unwrap","core::result","Get the value out of an always-ok Result.",16,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"void_unwrap_err","","Get the error out of an always-err Result.",16,{"inputs":[{"name":"result"}],"output":{"name":"e"}}]],"paths":[[4,"Alignment"],[3,"Error"],[8,"Write"],[3,"Formatter"],[3,"Arguments"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugTuple"],[8,"PartialEq"],[4,"Ordering"],[8,"PartialOrd"],[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"],[4,"Result"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["rollsum"] = {"doc":"","items":[[0,"bup","rollsum","Rolling sum and chunk splitting used by\n`bup` - https://github.com/bup/bup/",null,null],[3,"Bup","rollsum::bup","Rolling checksum method used by `bup`",null,null],[17,"CHUNK_SIZE","","Default chunk size used by `bup`",null,null],[17,"CHUNK_BITS","","Default chunk size used by `bup` (log2)",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"roll_byte","","",0,{"inputs":[{"name":"bup"},{"name":"u8"}],"output":null}],[11,"digest","","",0,{"inputs":[{"name":"bup"}],"output":{"name":"u32"}}],[11,"new","","Create new Bup engine with default chunking settings",0,{"inputs":[],"output":{"name":"self"}}],[11,"new_with_chunk_bits","","Create new Bup engine with custom chunking settings",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"find_chunk_edge","","Find chunk edge using Bup defaults.",0,null],[11,"count_bits","","Counts the number of low bits set in the rollsum, assuming\nthe digest has the bottom `CHUNK_BITS` bits set to `1`\n(i.e. assuming a digest at a default bup chunk edge, as\nreturned by `find_chunk_edge`).\nBe aware that there&#39;s a deliberate &#39;bug&#39; in this function\nin order to match expected return values from other bupsplit\nimplementations.",0,{"inputs":[{"name":"bup"}],"output":{"name":"u32"}}],[8,"Engine","rollsum","Rolling sum engine trait",null,null],[16,"Digest","","",1,null],[10,"roll_byte","","Roll over one byte",1,{"inputs":[{"name":"engine"},{"name":"u8"}],"output":null}],[11,"roll","","Roll over a slice of bytes",1,null],[10,"digest","","Return current rolling sum digest",1,{"inputs":[{"name":"engine"}],"output":{"name":"digest"}}],[11,"find_chunk_edge_cond","","Find the end of the chunk.",1,null]],"paths":[[3,"Bup"],[8,"Engine"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"shutdownloggererror"}],"output":{"name":"str"}}],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
initSearch(searchIndex);
